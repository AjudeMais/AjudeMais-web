(function(angular){
'use strict';
/**
 * @ngdoc Module
 * @name amApp
 *
 * @description módulo principal da aplicação
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */
(function () {
    angular.module('amApp', ['amRoute', 'layout', 'ui.bootstrap', 'templates',
        'ngAnimate', 'datatables', 'datatables.bootstrap', 'ajudeMais.utils', 'ngCookies', 'ngCapsLock',
        'ngStorage', 'idf.br-filters', 'ui.utils.masks', 'angular.viacep', 'frapontillo.bootstrap-switch',
        'chart.js'
    ]);

    angular.module('amApp').run([
        '$rootScope',
        '$location',
        '$http',
        'authenticationService',
        function ($rootScope, $location, $http, authenticationService) {

            $rootScope.$on('$locationChangeStart', function (event, next, current) {

                authenticationService.logged(function (logged) {
                    if (logged) {
                        if ($location.path() === '/login') {
                            $location.path('/home');
                        }

                    } else {
                        if ($location.path() !== '/login') {
                            $location.path('/login');
                        }
                    }
                });




            });
        }
    ]);

})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Route
 * @name amRoute
 *
 * @description mapeamento de rotas usando para app usando ui-router
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    var app = angular.module('amRoute', ['ui.router']);

    app.config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {

        $urlRouterProvider.otherwise("/login");
        $stateProvider.state('home', {
            url: '/home',
            templateUrl: 'app/layouts/layout.html',
            data: {
                pageTitle: 'Home'
            }
        })
    }]);
})();})(window.angular);
(function(angular){
'use strict';
(function () {
    angular.module('amApp')
        .constant('Api', "https://ajudemaisws.herokuapp.com")
;
})();
})(window.angular);
(function(angular){
'use strict';
(function() {
	angular.module("ajudeMais.utils", ['ui.bootstrap']);
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Service
 * @name contaService
 *
 * @description requisições à endpoints de conta
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular.module("amApp")
        .factory("accountService", accountService);

    accountService.$inject = ['$http', 'Api'];

    function accountService($http, Api) {

        var service = {
            changePassword: _changePassword,
            findByGrupoCurrentUser:_findByGrupoCurrentUser,
        };
        return service;

        /**
         *
         * @param categoria
         * @param callback
         * @private
         */
        function _changePassword(password, callback, callbackError) {
            $http.post(Api + "/conta/changePassword/init", password).then(function (response) {
                callback(response.data);
            }, function (response) {
                callbackError(response);

            });
        }

        /**
         *
         * @private
         */
        function _findByGrupoCurrentUser() {
            return $http.get(Api + "/conta/find/grupo");
        }
    };
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Service
 * @name authenticationService
 *
 * @description Services para controle de autenticação e autorização
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */
(function () {
    angular.module('amApp')
        .factory('authenticationService', authenticationService);

    authenticationService.$inject = ['$http', 'Api', '$sessionStorage', '$localStorage'];

    function authenticationService($http, Api, $sessionStorage, $localStorage) {

        var service = {
            doLogin: _doLogin,
            doLogout: _doLogout,
            getUserLogged: _getUserLogged,
            logged: _logged,
            isAuthorized: _isAuthorized,
            storageToken: _storageToken
        };
        return service;

        /**
         *
         * @param account
         * @param callback
         * @param callbackError
         * @private
         */
        function _doLogin(account, callback, callbackError) {
            $http.post(Api + "/auth/login", account).then(function (response) {
                callback(response.data);
            }, function (response) {
                callbackError(response.data);
            });
        };

        /**
         *
         * @param callback
         * @private
         */
        function _doLogout(callback) {
            delete $localStorage.at;
            delete $sessionStorage.at;
            $sessionStorage.sessionUser = undefined;
            callback();
        }

        /**
         *
         * @param callback
         * @private
         */
        function _getUserLogged(callback) {
            $http.get(Api + "/auth/user").then(function (response) {
                $sessionStorage.sessionUser = response.data;
                callback(response.data);
            });
        };

        /**
         *
         * @param callback
         * @private
         */
        function _logged(callback) {
            if ($sessionStorage.at === undefined) {
                callback(false);
            } else if ($sessionStorage.sessionUser === undefined) {
                $http.get(Api + "/auth/user").then(function (response) {
                    $sessionStorage.sessionUser = response.data;
                    callback(true);
                }, function (response) {
                    callback(false);
                });
                callback(true);
            }
        }

        /**
         *
         * @param authorizedRoles
         * @returns {boolean}
         * @private
         */
        function _isAuthorized(authorizedRoles) {
            if (!angular.isArray(authorizedRoles)) {
                if (authorizedRoles == '*') {
                    return true;
                }
                authorizedRoles = [authorizedRoles];
            }
            var isAuthorized = false;
            angular.forEach(authorizedRoles, function (authorizedRole) {
                var authorized = (!!$sessionStorage.sessionUser && $sessionStorage.sessionUser.grupos.indexOf(authorizedRole) !== -1);
                if (authorized || authorizedRole == '*') {
                    isAuthorized = true;
                }
            });
            return isAuthorized;
        }

        /**
         *
         * @param jwt
         * @private
         */
        function _storageToken(jwt) {
            $sessionStorage.at = jwt;
        }
    };
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Service
 * @name campanhaService
 *
 * @description requisições à endpoints de campanhas de doação
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular.module("amApp")
        .factory("campanhaService", campanhaService);

    campanhaService.$inject = ['$http', 'Api'];

    function campanhaService($http, Api) {

        var service = {
            save: _save,
            update: _update,
            getCampanhasByInstituicao: _getCampanhasByInstituicao,
            getCountCampanhasByInstituicao: _getCountCampanhasByInstituicao,
            getCampanhasAtivasByInstituicao: _getCampanhasAtivasByInstituicao
        };
        return service;

        /**
         *
         * @param campanha
         * @private
         */
        function _save(campanha) {
            return $http.post(Api + "/campanha", campanha);
        }

        /**
         *
         * @param campanha
         * @private
         */
        function _update(campanha) {
            return $http.put(Api + "/campanha", campanha);
        }

        /**
         *
         * @private
         */
        function _getCampanhasByInstituicao() {
            return $http.get(Api + "/campanha/filter/instituicao");
        };

        /**
         *
         * @param idInstituicao
         * @private
         */
        function _getCountCampanhasByInstituicao(idInstituicao) {
            return $http.get(Api + "/campanha/count/" + idInstituicao);
        }

        /**
         *
         * @param idInstituicao
         * @private
         */
        function _getCampanhasAtivasByInstituicao(idInstituicao) {
            return $http.get(Api + "/campanha/filter/instituicao/" + idInstituicao);
        }
    }
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Service
 * @name categoriaService
 *
 * @description requisições à endpoints de categoria
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular.module("amApp")
        .factory("categoriaService", categoriaService);

    categoriaService.$inject = ['$http', 'Api'];

    function categoriaService($http, Api) {

        var service = {
            save: _save,
            update: _update,
            getCategorias: _getCategorias,
            getCategoriasByInstituicao: _getCategoriasByInstituicao,
            remove: _remove,
            findByName: _findByName
        };
        return service;

        /**
         *
         * @param categoria
         * @param callback
         * @private
         */
        function _save(categoria, callback, callbackError) {
            $http.post(Api + "/categoria", categoria).then(function (response) {
                callback(response.data);
            }, function (response) {
                callbackError(response);

            });
        }

        /**
         *
         * @param categoria
         * @param callback
         * @private
         */
        function _update(categoria, callback, callbackError) {
            $http.put(Api + "/categoria", categoria).then(function (response) {
                callback(response.data);
            }, function (response) {
                callbackError(response);
            });
        }

        /**
         *
         * @param callback
         * @private
         */
        function _getCategorias(callback) {
            $http.get(Api + "/categoria").then(function (response) {
                callback(response.data);
            });
        };

        /**
         *
         * @param callback
         * @private
         */
        function _getCategoriasByInstituicao(callback) {
            $http.get(Api + "/categoria/instituicao").then(function (response) {
                callback(response.data);
            });
        };

        /**
         *
         * @param id
         * @param callback
         * @private
         */
        function _remove(id, callback, callbackError) {
            $http.delete(Api + "/categoria/" + id).then(function (response) {
                callback(response.data);
            }, function (response) {
                callbackError(response.data);
            });
        }

        /**
         *
         * @param nome
         * @private
         */
        function _findByName(name) {
            return $http.get(Api + '/categoria/filter/nome', {params: {"nome": name}});
        };
    };
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Service
 * @name dashboardAdminService
 *
 * @description .
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular.module("amApp")
        .factory("dashboardAdminService", dashboardAdminService);

    dashboardAdminService.$inject = ['$http', 'Api'];

    function dashboardAdminService($http, Api) {

        var service = {
            getCountInstituicaoCaridade: _getCountInstituicaoCaridade,
            getCountDonativos: _getCountDonativos,
            getCountDoadores: _getCountDoadores,
            getCountMensageiros: _getCountMensageiros,
            getDoacoesByPeriodo: _getDoacoesByPeriodo,
            getDoacoesByPeriodoInstituicao: _getDoacoesByPeriodoInstituicao,
            getRankingMensageiro: _getRankingMensageiro
        };
        return service;


        /**
         *
         * @private
         */
        function _getCountInstituicaoCaridade() {
            return $http.get(Api + '/dashboard/admin/instituicao/count');
        };

        /**
         *
         * @private
         */
        function _getCountDonativos() {
            return $http.get(Api + '/dashboard/admin/donativo/count');
        }

        /**
         *
         * @private
         */
        function _getCountDoadores() {
            return $http.get(Api + '/dashboard/admin/doador/count');
        }

        /**
         *
         * @private
         */
        function _getCountMensageiros() {
            return $http.get(Api + '/dashboard/admin/mensageiro/count');
        }

        /**
         *
         * @param nDays
         * @private
         */
        function _getDoacoesByPeriodo(nDays, estado) {
            return $http.get(Api + '/dashboard/admin/donativo/periodo', {params: {"nDays": nDays, "estado": estado}});
        }

        /**
         *
         * @param nDays
         * @private
         */
        function _getDoacoesByPeriodoInstituicao(nDays, estado, idInst) {
            return $http.get(Api + '/dashboard/admin/donativo/periodo/instituicao/' + idInst, {
                params: {
                    "nDays": nDays,
                    "estado": estado
                }
            });
        }

        /**
         *
         * @private
         */
        function _getRankingMensageiro() {
            return $http.get(Api + '/dashboard/admin/mensageiro/ranking');
        }
    };
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Service
 * @name dashboardInstituicaoService
 *
 * @description .
 *
 * @author <a href="https://github.com/JoseRafael97">Rafael Feitosa</a>
 */

(function () {
    angular.module("amApp")
        .factory("dashboardInstituicaoService", dashboardInstituicaoService);

    dashboardInstituicaoService.$inject = ['$http', 'Api'];

    function dashboardInstituicaoService($http, Api) {

        var service = {
            getCountDonativos: _getCountDonativos,
            getCountCampanhas: _getCountCampanhas,
            getCountMensageiros: _getCountMensageiros,
            getRankingMensageiro: _getRankingMensageiro,
            getDoacoesByPeriodoInstituicao: _getDoacoesByPeriodoInstituicao,
            getCountItens: _getCountItens,
            getCampanhasMetasProgres: _getCampanhasMetasProgres,
            getDonativosTimeline: _getDonativosTimeline
        };
        return service;


        /**
         *
         * @private
         */
        function _getCountDonativos() {
            return $http.get(Api + '/dashboard/instituicao/donativo/count');
        }

        /**
         *
         * @private
         */
        function _getCountCampanhas() {
            return $http.get(Api + '/dashboard/instituicao/campanha/count');
        }

        /**
         *
         * @private
         */
        function _getCountMensageiros() {
            return $http.get(Api + '/dashboard/instituicao/mensageiro/count');
        }

        /**
         *
         * @private
         */
        function _getRankingMensageiro() {
            return $http.get(Api + '/dashboard/instituicao/mensageiro/ranking');
        }

        /**
         *
         * @param nDays
         * @private
         */
        function _getDoacoesByPeriodoInstituicao(nDays, estado) {
            return $http.get(Api + '/dashboard/instituicao/donativo/periodo/instituicao', {
                params: {
                    "nDays": nDays,
                    "estado": estado
                }
            });
        }

        /**
         *
         * @private
         */
        function _getCountItens() {
            return $http.get(Api + '/dashboard/instituicao/itens/count');
        }

        /**
         *
         * @private
         */
        function _getCampanhasMetasProgres() {
            return $http.get(Api + '/dashboard/instituicao/campanha/metas')
        }

        function _getDonativosTimeline() {
            return $http.get(Api + '/dashboard/instituicao/donativo/timeline')
        }
    };
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Service
 * @name campanhaService
 *
 * @description requisições à endpoints de doação
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular.module("amApp")
        .factory("donativoService", donativoService);

    donativoService.$inject = ['$http', 'Api'];

    function donativoService($http, Api) {

        var service = {
            getByInstituicao: _getByInstituicao,
            getFilterDonativoByEstadoAndInstituicao: _getFilterDonativoByEstadoAndInstituicao,
            countDonativosByInstituicao: _countDonativosByInstituicao,
            countDonativosCampanhaByInstituicao: _countDonativosCampanhaByInstituicao
        };
        return service;

        /**
         *
         * @private
         */
        function _getByInstituicao() {
            return $http.get(Api + "/donativo/filter/instituicao");
        };

        /**
         *
         */
        function _countDonativosByInstituicao(id) {
            return $http.get(Api + "/donativo/count/" + id);
        }

        /**
         *
         */
        function _countDonativosCampanhaByInstituicao(id) {
            return $http.get(Api + "/donativo/campanha/count/" + id);
        }

        /**
         *
         * @private
         */
        function _getFilterDonativoByEstadoAndInstituicao(estado) {
            return $http.get(Api + "/donativo/filter/estado", {params: {"estado": estado}});
        };


    }
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Service
 * @name imageService
 *
 * @description service referente a endpoints de upload de imagens.
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular.module("amApp")
        .factory("imageService", imageService);

    imageService.$inject = ['$http', 'Api'];

    function imageService($http, Api) {

        var service = {
            getImage: _getImage
        };
        return service;

        /**
         * Busca imagem pelo nome
         * @param callback
         * @private
         */
        function _getImage(imageName) {
            return $http.get(Api + '/upload/imagem/'+ imageName, {responseType: "arraybuffer"});
        };
    };
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Service
 * @name instituicaoService
 *
 * @description requisições à endpoints de instituição de caridade
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular.module("amApp")
        .factory("instituicaoService", instituicaoService);

    instituicaoService.$inject = ['$http', 'Api'];

    function instituicaoService($http, Api) {

        var service = {
            save: _save,
            update: _update,
            getInstituicoes: _getInstituicoes,
            getInstituicoesAtivas: _getInstituicoesAtivas
        };
        return service;

        /**
         *
         * @param instituicao
         * @param callback
         * @private
         */
        function _save(instituicao, callback, callbackError) {
            $http.post(Api + "/instituicao", instituicao).then(function (response) {
                callback(response.data);
            }, function (response) {
                callbackError(response);

            });
        }

        /**
         *
         * @param instituicao
         * @param callback
         * @private
         */
        function _update(instituicao, callback, callbackError) {
            $http.put(Api + "/instituicao", instituicao).then(function (response) {
                callback(response.data);
            }, function (response) {
                callbackError(response);

            });
        }

        /**
         *
         * @param callback
         * @private
         */
        function _getInstituicoes(callback) {
            $http.get(Api + "/instituicao").then(function (response) {
                callback(response.data);
            });
        };

        function _getInstituicoesAtivas() {
            return $http.get(Api + "/instituicao/ativas");
        }
    };
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Service
 * @name mensageiroAssociadoService
 *
 * @description service referente aos serviços de associação de mensageiro com instuição.
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular.module("amApp")
        .factory("mensageiroAssociadoService", mensageiroAssociadoService);

    mensageiroAssociadoService.$inject = ['$http', 'Api'];

    function mensageiroAssociadoService($http, Api) {

        var service = {
            save: _save,
            getByInstituicao: _getByInsituicao,
            update: _update,
            getCountByInstituicao: _getCountByInstituicao
        };
        return service;

        /**
         *
         * @param associacao
         * @param callback
         * @private
         */
        function _save(associacao, callback, callbackError) {
            $http.post(Api + "/associacao", associacao).then(function (response) {
                callback(response.data);
            }, function (response) {
                callbackError(response);

            });
        }

        /**
         *
         * @param associacao
         * @param callback
         * @private
         */
        function _update(associacao, callback, callbackError) {
            $http.put(Api + "/associacao", associacao).then(function (response) {
                callback(response.data);
            }, function (response) {
                callbackError(response);

            });
        };

        /**
         * Busca mensageiros associados por instituição.
         * @param callback
         * @private
         */
        function _getByInsituicao(callback) {
            $http.get(Api + '/associacao/filter/instituicao').then(function (response) {
                callback(response.data);
            })
        };

        function _getCountByInstituicao(instituicaoId) {
            return $http.get(Api + "/associacao/count/" + instituicaoId);
        }
    };
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Service
 * @name mensageiroAssociadoService
 *
 * @description service referente aos serviços de associação de mensageiro com instuição.
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular.module("amApp")
        .factory("mensageiroService", mensageiroService);

    mensageiroService.$inject = ['$http', 'Api'];

    function mensageiroService($http, Api) {

        var service = {
            findByContaEmail: _findByContaEmail
        };
        return service;

        /**
         * Busca mensageiros por conta, filtrando por email.
         * @param callback
         * @private
         */
        function _findByContaEmail(email) {
            return $http.get(Api + '/mensageiro/filter/contaEmail', {params: {"email": email}});
        };
    };
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Directive
 * @name access/access-view
 *
 * @description directivas para para visualização de compomentes por papel de acesso.
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {

    angular.module("ajudeMais.utils").directive('accessView',
        ["authenticationService", function (authenticationService) {
            return {
                restrict: 'A',
                link: function ($scope, element, attrs) {
                    var roles = attrs.accessView.split(',');
                    if (roles.length > 0) {
                        if (!authenticationService.isAuthorized(roles)) {
                            element.hide();
                        }
                    }


                }
            };
        }]);
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Directive
 * @name access/access-view
 *
 * @description directivas para para visualização de compomentes por papel de acesso.
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {

    angular.module("ajudeMais.utils").directive('confirm',
        ["authenticationService", function (authenticationService) {
            return {
                restrict: 'A',
                link: function ($scope, element, attrs) {
                    var roles = attrs.accessView.split(',');
                    if (roles.length > 0) {
                        if (!authenticationService.isAuthorized(roles)) {
                            element.hide();
                        }
                    }


                }
            };
        }]);
})();})(window.angular);
(function(angular){
'use strict';
(function() {
	angular.module("ajudeMais.utils").directive("dateBefore", ["uibDateParser", function(uibDateParser) {
		return {
			require : 'ngModel',
			link : function(scope, el, attrs, ctrl) {
				var isInclusive = attrs.dateOrEquals ? scope
						.$eval(attrs.dateOrEquals) : false, validate = function(
						val1, val2) {
					if (val1 === undefined
							|| val2 === undefined)
						return;
					var isArray = val2 instanceof Array;
					var isValid = true;
					var date1 = uibDateParser.parse(val1, "dd/MM/yyyy", new Date());
					if (isArray && val2.length > 0) {
						for (var i = 0; i < val2.length; i++) {
							if (val2[i] !== undefined) {
								var date2 = uibDateParser.parse(val2[i],"dd/MM/yyyy",new Date());
								isValid = isValid && (isInclusive ? date1 <= date2 : date1 < date2);
							}
							if (!isValid)
								break;
						}
					} else {
						if (val2 !== undefined) {
							var date2 = uibDateParser.parse(val2, "dd/MM/yyyy",new Date());
							isValid = isInclusive ? date1 <= date2 : date1 < date2;
						}
					}
					ctrl.$setValidity('dateBefore', isValid);
				};
				scope.$watch(attrs.dateBefore, function() {
					validate(ctrl.$viewValue, scope.$eval(attrs.dateBefore));
				});

				ctrl.$parsers.unshift(function(value) {
					validate(value, scope
							.$eval(attrs.dateBefore));
					return value;
				})
			}
		};
	}]);

	angular.module("ajudeMais.utils").directive("dateAfter", ["uibDateParser", function(uibDateParser) {
		return {
			require : 'ngModel',
			link : function(scope, el, attrs, ctrl) {
				var isInclusive = attrs.dateOrEquals ? scope
						.$eval(attrs.dateOrEquals) : false, validate = function(
						val1, val2) {
					if (val1 === undefined || val2 === undefined)
						return;
					var isArray = val2 instanceof Array;
					var isValid = true;
					var date1 = uibDateParser.parse(val1, "dd/MM/yyyy", new Date());
					if (isArray && val2.length > 0) {
						for (var i = 0; i < val2.length; i++) {
							if (val2[i] !== undefined) {
								var date2 = uibDateParser.parse(val2[i],"dd/MM/yyyy",new Date());
								isValid = isValid && (isInclusive ? date1 >= date2 : date1 > date2);
							}
							if (!isValid)
								break;
						}
					} else {
						if (val2 !== undefined) {
							var date2 = uibDateParser.parse( val2, "dd/MM/yyyy", new Date());
							isValid = isInclusive ? date1 >= date2 : date1 > date2;
						}
					}
					ctrl.$setValidity('dateAfter', isValid);
				};
				scope.$watch(attrs.dateAfter, function() {
					validate(ctrl.$viewValue, scope
							.$eval(attrs.dateAfter));
				});

				ctrl.$parsers.unshift(function(value) {
					validate(value, scope.$eval(attrs.dateAfter));
					return value;
				})
			}
		};
	}]);
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * 
 */
(function(){
	angular.module("ajudeMais.utils")
	.directive('icheck', ["$timeout", "$parse", function ($timeout, $parse) {
	    return {
	        require: 'ngModel',
	        link: function ($scope, element, $attrs, ngModel) {
	            return $timeout(function () {
	                var value;
	                value = $attrs['value'];
	
	                $scope.$watch($attrs['ngModel'], function (newValue) {
	                    $(element).iCheck('update');
	                });
	
	                $scope.$watch($attrs['ngDisabled'], function (newValue) {
	                    $(element).iCheck(newValue ? 'disable' : 'enable');
	                    $(element).iCheck('update');
	                })
	
	                return $(element).iCheck({
	                    checkboxClass: 'icheckbox_square-blue',
	                    radioClass: 'iradio_square-blue'
	
	                }).on('ifChanged', function (event) {
	                    if ($(element).attr('type') === 'checkbox' && $attrs['ngModel']) {
	                        $scope.$apply(function () {
	                            return ngModel.$setViewValue(event.target.checked);
	                        })
	                    }
	                }).on('ifClicked', function (event) {
	                    if ($(element).attr('type') === 'radio' && $attrs['ngModel']) {
	                        return $scope.$apply(function () {
	                            if (ngModel.$viewValue != value)
	                                return ngModel.$setViewValue(value);
	                            else
	                                ngModel.$setViewValue(null);
	                            ngModel.$render();
	                            return
	                        });
	                    }
	                });
	            });
	        }
	    };
	}]);
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Directive
 * @name updateTitle
 *
 * @description directiva para verificar a existência de novas notificações
 *
 * @author <a href="https://github.com/JoseRafael97">Rafael Feitosa</a>
 */

(function () {
    angular.module("ajudeMais.utils").directive('noticationDonativo', ["$rootScope", "$timeout", "donativoService", "accountService", "$localStorage", "$state", function ($rootScope, $timeout, donativoService, accountService, $localStorage, $state) {
        return {
            link: function (scope, element) {
                var listaDonativos;

                /**
                 * Abri detalhes do donativo na notificação
                 * @param donativo
                 */
                $rootScope.openDetailsDonativo = function (donativo) {
                    var itemNotification = {};
                    itemNotification.id = donativo.id;
                    itemNotification.clicked = true;
                    if ($localStorage.listaClickedDonativo === undefined) {
                        $localStorage.listaClickedDonativo = [];
                    }
                    $localStorage.listaClickedDonativo.push(itemNotification);
                    $rootScope.donativosNtlist.splice(listaDonativos.indexOf(donativo), 1);
                    $state.go("home.donativo.detail", {donativoDetail: JSON.stringify(donativo)});

                };

                var notification = function () {
                    donativoService.getFilterDonativoByEstadoAndInstituicao("NAO_ACEITO").then(function (response) {
                        listaDonativos = response.data;

                        if ($localStorage.listaClickedDonativo !== undefined) {
                            $localStorage.listaClickedDonativo.forEach(function (dc) {

                                listaDonativos.forEach(function (d) {
                                    if (d.id === dc.id && dc.clicked) {
                                        listaDonativos.splice(listaDonativos.indexOf(d), 1);
                                    }
                                });

                            });

                        }
                        listaDonativos = addStateActiveInDonativo(listaDonativos);

                        $rootScope.donativosNtlist = listaDonativos;

                    });
                };

                var addStateActiveInDonativo = function (listaDonativos) {
                    listaDonativos.forEach(function (d) {
                        var estadoAtivo;
                        d.estadosDaDoacao.forEach(function (estado) {
                            if (estado.ativo) {
                                estadoAtivo = estado;
                            }
                        });
                        d.estadoAtivo = estadoAtivo;


                    });

                    return listaDonativos;
                };


                var listener = function (event) {
                    if ($rootScope.pageTitle !== 'Login') {
                        accountService.findByGrupoCurrentUser().then(function (response) {
                            if (response.data[0] === 'ROLE_INSTITUICAO') {
                                notification();
                            }
                        });
                    }
                };
                $rootScope.$on('$stateChangeSuccess', listener);


            }
        }
    }]);
})();})(window.angular);
(function(angular){
'use strict';
(function(){
	angular.module('ajudeMais.utils').directive('numbersOnly', function () {
	    return {
	        require: 'ngModel',
	        link: function (scope, element, attr, ngModelCtrl) {
	            function fromUser(text) {
	                if (text) {
	                    var transformedInput = text.replace(/[^0-9]/g, '');
	
	                    if (transformedInput !== text) {
	                        ngModelCtrl.$setViewValue(transformedInput);
	                        ngModelCtrl.$render();
	                    }
	                    return transformedInput;
	                }
	                return undefined;
	            }
	            ngModelCtrl.$parsers.push(fromUser);
	        }
	    };
	});
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Directive
 * @name updateTitle
 * 
 * @description directiva atualiza titulo/header de acordo com a rota
 * 
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function() {
	angular.module("ajudeMais.utils").directive('updateTitle',["$rootScope", "$timeout", function($rootScope, $timeout) {
		return {
		      link: function(scope, element) {

		        var listener = function(event, toState) {

		          var title = 'Ajude Mais';
		          if (toState.data && toState.data.pageTitle) title = toState.data.pageTitle;

		          $rootScope.pageTitle =  title;
		          
		        };

		        $rootScope.$on('$stateChangeSuccess', listener);
		      }
		    };

	}]);
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc config
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    angular.module('amApp')
        .config(['ChartJsProvider', function (ChartJsProvider) {

            ChartJsProvider.setOptions({
                chartColors: [ '#b13227', '#00ADF9', '#1eb131', '#FDB45C', '#7916bf', '#949FB1', '#4D5360'],
                responsive: true,
                legend: {
                    display: true
                }
            });

            ChartJsProvider.setOptions('line', {
                showLines: true
            });
        }])
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Run
 * @name DTDefaultOptions
 * 
 * @description configurações de tradução para módulos de datatables
 * 
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function() {
   angular.module('amApp').run(['DTDefaultOptions', function(DTDefaultOptions) {
            var language = {
                "sEmptyTable": "Nenhum dado encontrado",
                "sInfo": "De _START_ até _END_ de _TOTAL_ total",
                "sInfoEmpty": "de 0 até 0 de 0 total",
                "sInfoFiltered": "(filtreret ud af _MAX_ rækker ialt)",
                "sInfoPostFix": "",
                "sInfoThousands": ",",
                "sLengthMenu": "Mostrando _MENU_ itens",
                "sLoadingRecords": "Carregando dados...",
                "sProcessing": "Processando...",
                "sSearch": "Buscar:",
                "sZeroRecords": "Nenhum item encontrado no filtro",
                "oPaginate": {
                    "sFirst": "Primeiro",
                    "sLast": "Último",
                    "sNext": "Próximo",
                    "sPrevious": "Anterior"
                },
                "oAria": {
                    "sSortAscending": ": Ordenar ascendente",
                    "sSortDescending": ": Ordenar descrescente"
                }
            }

            DTDefaultOptions.setLanguage(language);
        }
    ]);

})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Config
 *
 * @description Configurações para requisições Http
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    angular.module('amApp').config(httpConfig);

    httpConfig.$inject = ['$httpProvider'];

    function httpConfig($httpProvider) {

        $httpProvider.interceptors.push('authInterceptor');
        $httpProvider.interceptors.push('authExpiredInterceptor');
        $httpProvider.interceptors.push('authDeniedInterceptor');
        $httpProvider.interceptors.push('errorResolverInterceptor');
    }
})();

})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc config
 * @name cfpLoadingBarProvider
 * 
 * @description configuração de posicionamento e formato de loading.
 * 
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function() {
	angular.module('amApp').config(['cfpLoadingBarProvider', function(cfpLoadingBarProvider) {
	    cfpLoadingBarProvider.parentSelector = '#loading-bar-container';
	    cfpLoadingBarProvider.spinnerTemplate = false;
	}])
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Controller
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    angular.module('amApp')
        .config(['$localStorageProvider',
            function ($localStorageProvider) {
                $localStorageProvider.setKeyPrefix('_am-');
            }])
        .config(['$sessionStorageProvider',
            function ($sessionStorageProvider) {
                $sessionStorageProvider.setKeyPrefix('_am-');
            }])

})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Controller
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    angular.module('amApp')
        .config(["toastrConfig", function (toastrConfig) {
            angular.extend(toastrConfig, {
                timeOut: 3000,
                progressBar: false
            });
        }]);
})();})(window.angular);
(function(angular){
'use strict';
(function () {
    angular.module('amApp')
        .factory('authDeniedInterceptor', authExpiredInterceptor);

    authExpiredInterceptor.$inject = ['$q', '$injector', '$location'];

    /**
     *
     * @param $q
     * @param $injector
     * @param $location
     * @returns {{responseError: responseError}}
     */
    function authExpiredInterceptor($q, $injector, $location) {
        var service = {
            responseError: responseError
        };
        return service;

        /**
         *
         * @param rejection
         */
        function responseError(rejection) {
            if (rejection.status === 403) {
                $location.path('home/403');
            }
            return $q.reject(rejection);
        }
    }
})();})(window.angular);
(function(angular){
'use strict';
(function() {
    angular.module('amApp')
        .factory('authExpiredInterceptor', authExpiredInterceptor);

    authExpiredInterceptor.$inject = ['$q', '$location', '$sessionStorage'];

    function authExpiredInterceptor($q, $location, $sessionStorage) {
        var service = {
            responseError: responseError
        };

        return service;

        function responseError(rejection) {
            if (rejection.status === 401) {
                delete $sessionStorage.at;
                $sessionStorage.sessionUser
                $location.path('/login');
            }
            return $q.reject(rejection);
        }
    }
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Service
 * @name authInterceptor
 *
 * @description
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */

(function () {
    angular.module('amApp').factory("authInterceptor", authInterceptor);

    authInterceptor.$inject = ['Api', '$sessionStorage'];

    function authInterceptor(Api, $sessionStorage) {
        var service = {
            request: request,
            response: response
        };

        return service;

        function request(config) {
            config.headers = config.headers || {};
            var token = $sessionStorage.at;
            if (token && config.url.startsWith(Api)) {
                config.headers.Authorization = token;
            }
            return config;
        }

        function response(config) {
            var token = config.headers.Authorization;
            if (token) {
                $sessionStorage.at = token;
            }
            return config;
        }
    }
})();







})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Service
 * @name errorResolverInterceptor
 *
 * @description Service para interceptação de erros do servidor
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */

(function () {
    angular.module('amApp').factory("errorResolverInterceptor", errorResolverInterceptor);

    errorResolverInterceptor.$inject = ['$q', '$location'];

    function errorResolverInterceptor($q, $location) {

        var errorResolverInterceptor = {
            responseError: function (response) {
                if (response.status >= 500) {
                    $location.path('/500');
                }
                if (response.status <= 0) {
                    $location.path('/refused');
                }
                return $q.reject(response);
            }
        };

        return errorResolverInterceptor;
    };

})();
})(window.angular);
(function(angular){
'use strict';
(function () {
    angular.module('layout', ['toastr', 'angular-loading-bar']);
})();})(window.angular);
(function(angular){
'use strict';
(function() {
	angular.module('layout').directive('pageHeader', function() {
		return {
			template : '<section class="content-header"><h1 >{{pageTitle}}</h1></section>',
			restrict : 'E',
			replace : true,
		}
	});
})();})(window.angular);
(function(angular){
'use strict';
(function () {
    angular.module('layout').directive('headerNotification', function () {
        return {
            templateUrl: 'app/layouts/notification/header-notification.directive.html',
            restrict: 'E',
            replace: true,
            controller: ["$sessionStorage", "$state", "authenticationService", function ($sessionStorage, $state, authenticationService) {
                var vm = this;
                vm.usuario = $sessionStorage.sessionUser;
                /**
                 *
                 */
                vm.logout = function () {
                    authenticationService.doLogout(function () {
                        $state.go("login");
                    });
                }

            }],
            controllerAs: 'headerNotificationCtrl'
        }
    });
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Directive
 * @name menu
 * 
 * @description diretiva para menu do sidebar
 * 
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */
(function() {
	angular.module('layout').directive('menu', function() {
		
		var ddo = {};
		ddo.restrict = 'E';
		ddo.replace = true;
		ddo.scope = {
			toggle : '&'
		}
		ddo.templateUrl = 'app/layouts/sidebar/directive/sidebar.directive.html';
	
		return ddo;
	});
})();})(window.angular);
(function(angular){
'use strict';
angular.module('layout').controller('SidebarCtrl', ['$scope', '$rootScope', '$cookieStore', SidebarCtrl]);

function SidebarCtrl($scope, $rootScope, $cookieStore) {

    var mobileView = 992;

    /**
     *
     */
    $scope.getWidth = function () {
        return window.innerWidth;
    };

    /**
     *
     */
    $scope.$watch($scope.getWidth, function (newValue, oldValue) {
        if (newValue >= mobileView) {
            if (angular.isDefined($cookieStore.get('toggle'))) {
                $scope.toggle = !$cookieStore.get('toggle') ? false : true;
            } else {
                $scope.toggle = true;
            }
        } else {
            $scope.toggle = false;
        }
    });

    /**
     *
     */
    $scope.toggleSidebar = function () {
        $scope.toggle = !$scope.toggle;
        $cookieStore.put('toggle', $scope.toggle);
    };

    window.onresize = function () {
        $scope.$apply();
    };
}})(window.angular);
(function(angular){
'use strict';
(function() {
angular.module('layout').directive('widgetBody', widgetBody);

	function widgetBody() {
	    var directive = {
	        requires: '^widget',
	        scope: {
	            loading: '=?',
	            classes: '@?'
	        },
	        transclude: true,
	        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
	        restrict: 'E'
	    };
	    return directive;
	};
})();
})(window.angular);
(function(angular){
'use strict';
(function () {
	angular.module('layout').directive('widget', widget);
	
	function widget() {
	    var directive = {
	        transclude: true,
	        template: '<div class="widget" ng-transclude></div>',
	        restrict: 'EA'
	    };
	    return directive;
	
	    function link(scope, element, attrs) {
	
	    }
	};
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc filter
 * @name status
 *
 * @description Filtro para determinação de classe css a ser utilizada
 * de acordo com o estado da doação.
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    angular.module("amApp")
        .filter('status', function () {
            return function (input) {
                input = input || '';
                var out = 'label label-success';

                switch (input) {
                    case 'DISPONIBILIZADO':
                        out = 'label label-default';
                        break;
                    case 'ACEITO':
                        out = 'label label-info';
                        break;
                    case 'CANCELADO' || 'CANCELADO_POR_MENSAGEIRO':
                        out = 'label label-danger';
                        break;
                    case 'RECOLHIDO':
                        out = 'label label-primary';
                        break;

                    case 'NAO_ACEITO' :
                        out = 'label label-state-not-accepted';
                        break;
                }

                return out;
            };
        });
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc filter
 * @name status
 *
 * @description Filtro para mudança
 * de acordo com o estado da doação.
 *
 * @author <a href="https://github.com/JoseRafael97">Rafael Feitosa</a>
 */
(function () {
    angular.module("amApp")
        .filter('capitalize', function () {
            return function (input) {
                return (!!input) ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : '';
            };
        });
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Controller
 *
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */
(function () {
    angular.module('amApp').controller('PasswordController', PasswordController);

    PasswordController.$inject = ['accountService', '$state'];

    function PasswordController(accountService, $state) {
        var vm = this;
        vm.sSenha;
        vm.rSenha;
        vm.msgError;

        /**
         *
         */
        vm.change = function () {
            if (isEquals(vm.nSenha, vm.rSenha)) {
                accountService.changePassword(vm.nSenha, function (response) {
                    $state.go("home");
                })
            } else {
                vm.error = "Senhas não conferem";
            }
        };

        /**
         *
         */
        function isEquals(nSenha, rSenha) {
            if (angular.equals(nSenha, rSenha)) {
                return true;
            }
            else {
                return false;
            }
        }
    };
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc controller
 * @name DashboardAdminController
 *
 * @description Controller dashboard do administrador.
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    angular.module('amApp')
        .controller('DashboardAdminController', DashboardAdminController);

    DashboardAdminController.$inject = ['dashboardAdminService', 'instituicaoService',
        'donativoService', 'campanhaService', 'mensageiroAssociadoService', 'imageService'];

    function DashboardAdminController(dashboardAdminService, instituicaoService,
                                      donativoService, campanhaService, mensageiroAssociadoService, imageService) {

        var vm = this;
        vm.countInstituicoes = 0;
        vm.countDonativos = 0;
        vm.countDoadores = 0;
        vm.countMensageiros = 0;
        vm.statusPanelLineChart = true;
        vm.instituicaoSelected = {};
        vm.instituicoesAtivas = [];
        vm.rankingMensageiros = [];
        vm.rankingImagesMensageiros = [];
        vm.statusPanelRanking = true;
        vm.rankingDto = {};

        vm.countDonativosCampanhaInst = 0;
        vm.countDonativosInst = 0;
        vm.countCampanhasInst = 0;
        vm.campanhasAtivasInt = [];
        vm.countMensageirosInst = 0;
        vm.statusPanelInstDetail = true;

        vm.labelsDoacoesPeriod = [];
        vm.dataDoacoesPeriod = [];
        vm.seriesDoacoesPeriod = ['Doações em Trâmite', 'Doações Canceladas', 'Doações Recebidas', 'Doações não aceitas'];

        vm.labelsDoacoesInstPeriod = [];
        vm.dataDoacoesInstPeriod = [];
        vm.mockImage = 'content/img/mock-user.png';

        vm.options = {
            legend: {
                display: true
            }
        };

        /**
         *
         */
        var getInstituicoesAtivas = function () {
            instituicaoService.getInstituicoesAtivas().then(function (response) {
                vm.instituicoesAtivas = response.data;
                vm.instituicaoSelected = vm.instituicoesAtivas[0];
                vm.onSelectInstituicao();
            })
        };

        var getMensageirosRanking = function () {
            dashboardAdminService.getRankingMensageiro().then(function (response) {
                response.data.forEach(function (ranking) {
                    getImages(ranking);
                    vm.rankingDto = {};
                    vm.rankingDto.ranking = ranking;
                    vm.rankingMensageiros.push(vm.rankingDto);
                })
            })
        }

        var setImageInRanking = function () {
            vm.rankingImagesMensageiros.forEach(function (ranking) {
                console.log();
                vm.rankingMensageiros.forEach(function (rankingM) {
                    if (ranking.ranking.mensageiro.id === rankingM.ranking.mensageiro.id) {
                        rankingM.image = ranking.image;
                    }
                })
            })
        }

        /**
         *
         */
        var getCountInstituicaoCaridade = function () {
            dashboardAdminService.getCountInstituicaoCaridade().then(function (response) {
                vm.countInstituicoes = response.data;
            });
        }

        /**
         *
         */
        var getCountDonativos = function () {
            dashboardAdminService.getCountDonativos().then(function (response) {
                vm.countDonativos = response.data;
            });
        }

        /**
         *
         */
        var getCountCampanhas = function () {
            dashboardAdminService.getCountDoadores().then(function (response) {
                vm.countDoadores = response.data;
            });
        }

        /**
         *
         */
        var getCountMensageiros = function () {
            dashboardAdminService.getCountMensageiros().then(function (response) {
                vm.countMensageiros = response.data;
            });
        };

        /**
         *
         */
        var getCountDonativosCampanhaByInstituicao = function (id) {
            donativoService.countDonativosCampanhaByInstituicao(id).then(function (response) {
                vm.countDonativosCampanhaInst = response.data;
            });
        };

        /**
         *
         */
        var getCountDonativosByInstituicao = function (id) {
            donativoService.countDonativosByInstituicao(id).then(function (response) {
                vm.countDonativosInst = response.data;
            });
        };

        /**
         *
         */
        var getCountCampanhasByInstituicao = function (id) {
            campanhaService.getCountCampanhasByInstituicao(id).then(function (response) {
                vm.countCampanhasInst = response.data;
            });
        };

        /**
         *
         */
        var getCountMensageirosByInstituicao = function (id) {
            mensageiroAssociadoService.getCountByInstituicao(id).then(function (response) {
                vm.countMensageirosInst = response.data;
            });
        };

        /**
         *
         */
        var getCampanhasAtivasByInstituicao = function (id) {
            campanhaService.getCampanhasAtivasByInstituicao(id).then(function (response) {
                vm.campanhasAtivasInt = response.data;
            });
        };

        /**
         *
         */
        vm.onSelectInstituicao = function () {
            getCountDonativosCampanhaByInstituicao(vm.instituicaoSelected.id);
            getCountDonativosByInstituicao(vm.instituicaoSelected.id)
            getCountCampanhasByInstituicao(vm.instituicaoSelected.id);
            getCountMensageirosByInstituicao(vm.instituicaoSelected.id);
            getCampanhasAtivasByInstituicao(vm.instituicaoSelected.id);
            getDoacoesByPeriodoInstituicao(vm.instituicaoSelected.id);
        }

        /**
         *
         */
        var getDoacoesByPeriodo = function () {
            dashboardAdminService.getDoacoesByPeriodo(30, "RECOLHIDO").then(function (response) {
                var dataDoacoesPeriod = [];
                response.data.forEach(function (dto) {
                    vm.labelsDoacoesPeriod.push(dto.date);
                    dataDoacoesPeriod.push(dto.count);
                })
                vm.dataDoacoesPeriod.push(dataDoacoesPeriod);
                getDoacoesByPeriodoCanceladas();
            });
        }

        /**
         *
         */
        var getDoacoesByPeriodoInstituicao = function (idInst) {
            vm.seriesDoacoesPeriod = ['Doações em Trâmite', 'Doações Canceladas', 'Doações Recebidas', 'Doações não aceitas'];
            vm.labelsDoacoesInstPeriod = [];
            vm.dataDoacoesInstPeriod = [];
            dashboardAdminService.getDoacoesByPeriodoInstituicao(30, "RECOLHIDO", idInst).then(function (response) {
                var dataDoacoesPeriod = [];
                response.data.forEach(function (dto) {
                    vm.labelsDoacoesInstPeriod.push(dto.date);
                    dataDoacoesPeriod.push(dto.count);
                })
                vm.dataDoacoesInstPeriod.push(dataDoacoesPeriod);
                getDoacoesByPeriodoCanceladasInstituicao(idInst);
            });
        }

        /**
         *
         */
        var getDoacoesByPeriodoCanceladas = function () {
            dashboardAdminService.getDoacoesByPeriodo(30, "CANCELADO").then(function (response) {
                var dataDoacoesPeriod = [];
                response.data.forEach(function (dto) {
                    dataDoacoesPeriod.push(dto.count);
                })
                vm.dataDoacoesPeriod.push(dataDoacoesPeriod);
                getDoacoesByPeriodoEntregues();
            });
        }

        /**
         *
         */
        var getDoacoesByPeriodoCanceladasInstituicao = function (idInst) {
            dashboardAdminService.getDoacoesByPeriodoInstituicao(30, "CANCELADO", idInst).then(function (response) {
                var dataDoacoesPeriod = [];
                response.data.forEach(function (dto) {
                    dataDoacoesPeriod.push(dto.count);
                })
                vm.dataDoacoesInstPeriod.push(dataDoacoesPeriod);
                getDoacoesByPeriodoEntreguesInstituicao(idInst);
            });
        }

        /**
         *
         */
        var getDoacoesByPeriodoEntregues = function () {
            dashboardAdminService.getDoacoesByPeriodo(30, "RECEBIDO").then(function (response) {
                var dataDoacoesPeriod = [];
                response.data.forEach(function (dto) {
                    dataDoacoesPeriod.push(dto.count);
                })
                vm.dataDoacoesPeriod.push(dataDoacoesPeriod);
                getDoacoesByPeriodoNaoAceitos();
            });
        }

        /**
         *
         */
        var getDoacoesByPeriodoEntreguesInstituicao = function (idInst) {
            dashboardAdminService.getDoacoesByPeriodoInstituicao(30, "RECEBIDO", idInst).then(function (response) {
                var dataDoacoesPeriod = [];
                response.data.forEach(function (dto) {
                    dataDoacoesPeriod.push(dto.count);
                })
                vm.dataDoacoesInstPeriod.push(dataDoacoesPeriod);
                getDoacoesByPeriodoNaoAceitosInstituicao(idInst);
            });
        }

        /**
         *
         */
        var getDoacoesByPeriodoNaoAceitos = function () {
            dashboardAdminService.getDoacoesByPeriodo(30, "NAO_ACEITO").then(function (response) {
                var dataDoacoesPeriod = [];
                response.data.forEach(function (dto) {
                    dataDoacoesPeriod.push(dto.count);
                })
                vm.dataDoacoesPeriod.push(dataDoacoesPeriod);
            });
        }

        /**
         *
         */
        var getDoacoesByPeriodoNaoAceitosInstituicao = function (idInst) {
            dashboardAdminService.getDoacoesByPeriodoInstituicao(30, "NAO_ACEITO", idInst).then(function (response) {
                var dataDoacoesPeriod = [];
                response.data.forEach(function (dto) {
                    dataDoacoesPeriod.push(dto.count);
                })
                vm.dataDoacoesInstPeriod.push(dataDoacoesPeriod);
            });
        }

        /**
         *
         * @param imageName
         */
        var getImages = function (ranking) {
            if (ranking.mensageiro.mensageiro.foto) {
                imageService.getImage(ranking.mensageiro.mensageiro.foto.nome).then(function (response) {
                    vm.rankingDto = {};
                    vm.rankingDto.ranking = ranking;
                    vm.rankingDto.image = _arrayBufferToBase64(response.data)
                    vm.rankingImagesMensageiros.push(vm.rankingDto);
                    setImageInRanking();
                })
            }
        };

        /**
         * Necessário para converter array de bytes para base64.
         * utilizado para recuperar foto da API.
         * @param buffer
         * @returns {string}
         * @private
         */
        function _arrayBufferToBase64(buffer) {
            var binary = '';
            var bytes = new Uint8Array(buffer);
            var len = bytes.byteLength;
            for (var i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        }

        getInstituicoesAtivas();
        getMensageirosRanking();
        getCountCampanhas();
        getCountDonativos();
        getCountInstituicaoCaridade();
        getCountMensageiros();
        getDoacoesByPeriodo();
    }
})
();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc controller
 * @name DashboardInstituicaoController
 *
 * @description Controller dashboard da instituição.
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 * @author <a href="https://github.com/JoseRafael97">Rafael Feitosa</a>

 */
(function () {
    angular.module('amApp')
        .controller('DashboardInstController', DashboardInstController);

    DashboardInstController.$inject = ['dashboardInstituicaoService', 'imageService', '$state'];

    function DashboardInstController(dashboardInstituicaoService, imageService, $state) {

        var vm = this;
        vm.countDonativos = 0;
        vm.countCampanhas = 0;
        vm.countMensageiros = 0;
        vm.countItens = 0;

        vm.rankingMensageiros = [];
        vm.rankingImagesMensageiros = [];
        vm.statusPanelRanking = true;
        vm.rankingDto = {};

        vm.statusPanelLineChart = true;
        vm.seriesDoacoesPeriod = ['Doações em Trâmite', 'Doações Canceladas', 'Doações Recebidas', 'Doações não aceitas'];
        vm.labelsDoacoesInstPeriod = [];
        vm.dataDoacoesInstPeriod = [];

        vm.statusPanelCampanhas = true;
        vm.campanhasMetasProgres = [];

        vm.donativosTimeline = [];
        vm.statusPanelTimeline = true;

        vm.mockImage = 'content/img/mock-user.png';

        var getDonativosTimeline = function () {
            dashboardInstituicaoService.getDonativosTimeline().then(function (response) {
                vm.donativosTimeline = response.data;
                console.log(vm.donativosTimeline)
            })
        }

        vm.getEtadosDonativo = function (estados) {
            var estadoAtivo;
            estados.forEach(function (estado) {
                if (estado.ativo) {
                    estadoAtivo = estado;
                }
            });
            return estadoAtivo.estadoDoacao;
        }

        /**
         *
         * @param campanha
         */
        vm.openDetails = function (donativo) {
            $state.go("home.donativo.detail", {donativoDetail: JSON.stringify(donativo)});
        }

        var getCampanhasMetas = function () {
            dashboardInstituicaoService.getCampanhasMetasProgres().then(function (response) {
                vm.campanhasMetasProgres = response.data;
            })
        }

        var getMensageirosRanking = function () {
            dashboardInstituicaoService.getRankingMensageiro().then(function (response) {
                response.data.forEach(function (ranking) {
                    getImages(ranking);
                    vm.rankingDto = {};
                    vm.rankingDto.ranking = ranking;
                    vm.rankingMensageiros.push(vm.rankingDto);
                })
            })
        }

        var setImageInRanking = function () {
            vm.rankingImagesMensageiros.forEach(function (ranking) {
                console.log();
                vm.rankingMensageiros.forEach(function (rankingM) {
                    if (ranking.ranking.mensageiro.id === rankingM.ranking.mensageiro.id) {
                        rankingM.image = ranking.image;
                    }
                })
            })
        }

        /**
         *
         */
        var getCountDonativos = function () {
            dashboardInstituicaoService.getCountDonativos().then(function (response) {
                vm.countDonativos = response.data;
            });
        }

        /**
         *
         */
        var getCountItens = function () {
            dashboardInstituicaoService.getCountItens().then(function (response) {
                vm.countItens = response.data;
            });
        }

        /**
         *
         */
        var getCountCampanhas = function () {
            dashboardInstituicaoService.getCountCampanhas().then(function (response) {
                vm.countCampanhas = response.data;
            });
        }

        /**
         *
         */
        var getCountMensageiros = function () {
            dashboardInstituicaoService.getCountMensageiros().then(function (response) {
                vm.countMensageiros = response.data;
            });
        };

        var getDoacoesByPeriodoInstituicao = function () {
            dashboardInstituicaoService.getDoacoesByPeriodoInstituicao(30, "RECOLHIDO").then(function (response) {
                var dataDoacoesPeriod = [];
                response.data.forEach(function (dto) {
                    vm.labelsDoacoesInstPeriod.push(dto.date);
                    dataDoacoesPeriod.push(dto.count);
                })
                vm.dataDoacoesInstPeriod.push(dataDoacoesPeriod);
                getDoacoesByPeriodoCanceladasInstituicao();
            });
        }

        /**
         *
         */
        var getDoacoesByPeriodoCanceladasInstituicao = function () {
            dashboardInstituicaoService.getDoacoesByPeriodoInstituicao(30, "CANCELADO").then(function (response) {
                var dataDoacoesPeriod = [];
                response.data.forEach(function (dto) {
                    dataDoacoesPeriod.push(dto.count);
                })
                vm.dataDoacoesInstPeriod.push(dataDoacoesPeriod);
                getDoacoesByPeriodoEntreguesInstituicao();
            });
        }

        /**
         *
         */
        var getDoacoesByPeriodoEntreguesInstituicao = function () {
            dashboardInstituicaoService.getDoacoesByPeriodoInstituicao(30, "RECEBIDO").then(function (response) {
                var dataDoacoesPeriod = [];
                response.data.forEach(function (dto) {
                    dataDoacoesPeriod.push(dto.count);
                })
                vm.dataDoacoesInstPeriod.push(dataDoacoesPeriod);
                getDoacoesByPeriodoNaoAceitos();
            });
        }

        /**
         *
         */
        var getDoacoesByPeriodoNaoAceitos = function () {
            dashboardInstituicaoService.getDoacoesByPeriodoInstituicao(30, "NAO_ACEITO").then(function (response) {
                var dataDoacoesPeriod = [];
                response.data.forEach(function (dto) {
                    dataDoacoesPeriod.push(dto.count);
                })
                vm.dataDoacoesInstPeriod.push(dataDoacoesPeriod);
            });
        }

        /**
         *
         * @param imageName
         */
        var getImages = function (ranking) {
            if (ranking.mensageiro.mensageiro.foto) {
                imageService.getImage(ranking.mensageiro.mensageiro.foto.nome).then(function (response) {
                    vm.rankingDto = {};
                    vm.rankingDto.ranking = ranking;
                    vm.rankingDto.image = _arrayBufferToBase64(response.data)
                    vm.rankingImagesMensageiros.push(vm.rankingDto);
                    setImageInRanking();
                })
            }
        };

        /**
         * Necessário para converter array de bytes para base64.
         * utilizado para recuperar foto da API.
         * @param buffer
         * @returns {string}
         * @private
         */
        function _arrayBufferToBase64(buffer) {
            var binary = '';
            var bytes = new Uint8Array(buffer);
            var len = bytes.byteLength;
            for (var i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        };

        getMensageirosRanking();
        getCountCampanhas();
        getCountDonativos();
        getCountItens();
        getCountMensageiros();
        getDoacoesByPeriodoInstituicao();
        getCampanhasMetas();
        getDonativosTimeline();


    }
})
();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Route
 * @name amRoute
 *
 * @description mapeamento de estados para auth
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular
        .module('amRoute')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {

        $stateProvider.state('login', {
            url: '/login',
            templateUrl: 'app/components/auth/login.html',
            controller: 'LoginController',
            controllerAs: 'vm',
            data: {
                pageTitle: 'Login'
            }
        })

            .state('passwdChange', {
                url: '/passwdChange',
                templateUrl: 'app/components/auth/password/password.html',
                controller: "PasswordController",
                controllerAs: 'vm',
                data: {
                    pageTitle: 'Primeiro Acesso'
                }
            })
    }
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Controller
 * @name Login Controller
 *
 * @description Controller para pagina de login
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */
(function () {
    angular.module('amApp').controller('LoginController', LoginController);

    LoginController.$inject = ['authenticationService', '$state'];

    function LoginController(authenticationService, $state) {
        var vm = this;
        vm.account = {};

        /**
         * Remove informações do usuário salvas no browser.
         */
        authenticationService.doLogout(function (response) {})

        /**
         *
         */
        vm.doLogin = function () {
            authenticationService.doLogin(vm.account, function (response) {
                authenticationService.storageToken(response.token);
                authenticationService.getUserLogged(function (response) {
                    redirect(response);
                });
            }, function (response) {
                if (response.status == 401) {
                    vm.error = "Nome de usuário ou senha inválido";
                }
                else {
                    vm.error = response.msg;
                }
            });
        };

        function redirect(user) {
            if (isFirstAccess(user)) {
                $state.go("passwdChange");

            } else {
                $state.go("home");
            }
        }

        /**
         *
         */
        function isFirstAccess(user) {
            if (user && user.resetSenha) {
                return false;
            }
            else {
                return true;
            }
        }
    };
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Controller
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    angular.module("amApp")
        .controller("CampanhaDetailController", CampanhaDetailController);

    CampanhaDetailController.$inject = ['$stateParams', '$state', 'donativoService'];

    function CampanhaDetailController($stateParams, $state, donativoService) {
        var vm = this;
        vm.campanha = {};

        var campanhaDetailparam = JSON.parse($stateParams.campanhaDetail);

        if (campanhaDetailparam) {
            vm.campanha = campanhaDetailparam;
        }

        /**
         *
         */
        vm.previus = function () {
            $state.go('home.campanha.list');
        };

    }


})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Controller
 * @name CampanhaEditController
 *
 * @description Controller para página de Edição de Campanha
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 * @author <a href="https://github.com/JoseRafael97">Rafael Feitosa</a>

 */
(function () {
    angular.module("amApp")
        .controller("CampanhaEditController", CampanhaEditController);

    CampanhaEditController.$inject = ['campanhaService', 'categoriaService', 'toastr', '$stateParams', '$state', '$uibModal'];

    function CampanhaEditController(campanhaService, categoriaService, toastr, $stateParams, $state, $uibModal) {

        var vm = this;
        vm.campanha = {};
        vm.dtpk = false;
        vm.meta = {};
        vm.currentDate = new Date();

        vm.isCtgNotEmpty = true;
        vm.isQtdNotEmpty = true;
        vm.isUnMediadeNotEmpty = true;
        vm.isEditMeta = false;

        if ($stateParams.campanhaEdit) {
            vm.campanha = $stateParams.campanhaEdit;
            if (!vm.campanha.status) {
                vm.campanha.dataInicio = undefined;
                vm.campanha.dataFim = undefined;
            }
        } else {
            vm.campanha.metas = [];
            vm.campanha.status = true;
        }

        /**
         * Editar/Salvar uma campanha
         */
        vm.save = function () {

            if (vm.campanha.status) {
                vm.campanha.dataInicio = new Date();
            }

            if (vm.campanha.metas.length > 0) {
                if (!vm.isEdited()) {
                    campanhaService.save(vm.campanha).then(function (response) {
                        toastr.success('criada com sucesso', 'Campanha');
                        $state.go('home.campanha.list');
                    }, function (response) {
                        response.data.forEach(function (data) {
                            toastr.warning(data);
                        });
                    });

                } else {
                    campanhaService.update(vm.campanha).then(function (response) {
                        toastr.success('atualizada com sucesso', 'Campanha');
                        $state.go('home.campanha.list');
                    }, function (response) {
                        response.data.forEach(function (data) {
                            toastr.warning(data);
                        });
                    });
                }

            } else {
                toastr.warning('A campanha deve possui ao menos uma meta');
            }
        };

        /**
         *
         */
        vm.cancelar = function () {
            $state.go('home.campanha.list');
        };

        /**
         *
         */
        vm.isEdited = function () {
            return vm.campanha.id;
        };

        /**
         *
         * @param datepicker
         */
        vm.openDtpk = function () {
            vm.dtpk = true;
        }

        /**
         *
         * @param name
         */
        vm.findByName = function (name) {
            return categoriaService.findByName(name).then(function (response) {
                return response.data;
            });
        };

        /**
         *
         * @param mensageiro
         */
        vm.setMeta = function (meta) {
            var flag = false;

            validateFieldsMeta(meta);

            if (vm.isCtgNotEmpty && (vm.isUnMediadeNotEmpty && vm.isQtdNotEmpty)) {
                if (!vm.isEditMeta) {
                    vm.campanha.metas.forEach(function (i) {
                        if (meta.categoria.id === i.categoria.id) {
                            flag = true;
                        }
                    })
                    if (flag) {
                        toastr.warning('Item já adicionado a uma meta');
                    } else {
                        vm.campanha.metas.push(meta);
                        vm.meta = {};
                    }

                } else {
                    vm.campanha.metas.forEach(function (i) {
                        if (meta.id === i.id) {
                            i.quantidade = meta.quantidade;
                            vm.isEditMeta = false;
                            vm.meta = {};
                        }
                    })
                }


            }
        };

        /**
         * valida os campos de uma meta;
         * @param meta
         */
        function validateFieldsMeta(meta) {
            if (meta.categoria == undefined) {
                vm.isCtgNotEmpty = false;
            } else {
                vm.isCtgNotEmpty = true;
            }

            if (meta.unidadeMedida == null) {
                vm.isUnMediadeNotEmpty = false;
            } else {
                vm.isUnMediadeNotEmpty = true;
            }

            if (meta.quantidade == null) {
                vm.isQtdNotEmpty = false;
            } else {
                vm.isQtdNotEmpty = true;
            }
        };

        /**
         *
         * @param meta
         */
        vm.removeMeta = function (meta) {
            var index = vm.campanha.metas.indexOf(meta);
            vm.campanha.metas.splice(index, 1);
        };

        /**
         *
         * @param meta
         */
        vm.editMeta = function (meta) {
            var index = vm.campanha.metas.indexOf(meta);
            vm.meta = vm.campanha.metas[index];
            vm.isEditMeta = true;
        };

        vm.onSelect = function (mensageiro) {
            vm.isCtgNotEmpty = true;
        };

        /**
         *
         * @param categoria
         */
        function openModal(categoria) {
            return $uibModal.open({
                templateUrl: 'app/components/categoria/categoria.edit.html',
                controller: 'CategoriaEditController',
                controllerAs: 'vm',
                backdrop: 'static',
                resolve: {
                    categoria: function () {
                        return categoria;
                    }
                }
            });
        }

        /**
         *
         */
        vm.addItem = function () {
            var modal = openModal({});

            modal.result.then(function (categoria) {
                vm.meta.categoria = categoria;
                vm.isCtgNotEmpty = true;
            });
        }
    }
})
();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Route
 * @name amRoute
 *
 * @description mapeamento de estados para campanhas de doação
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular
        .module('amRoute')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {

        $stateProvider.state('home.campanha', {
            url: "/campanha",
            template: '<ui-view />'
        })
            .state('home.campanha.list', {
                url: "/list",
                templateUrl: "app/components/campanha/campanhas.html",
                controller: "CampanhaController",
                controllerAs: 'vm',
                data: {
                    pageTitle: 'Campanhas de Doação'
                }
            })
            .state('home.campanha.edit', {
                url: "/edit",
                templateUrl: "app/components/campanha/campanha.edit.html",
                controller: "CampanhaEditController",
                controllerAs: 'vm',
                params: {
                    campanhaEdit: null
                },
                data: {
                    pageTitle: 'Edição de Campanha'
                }
            })
            .state('home.campanha.detail', {
                url: "/detail/:campanhaDetail",
                templateUrl: "app/components/campanha/campanha.detail.html",
                controller: "CampanhaDetailController",
                controllerAs: 'vm',
                data: {
                    pageTitle: 'Detalhes de Campanha'
                }
            })
    }
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc controller
 * @name CampanhaController
 *
 * @description Controller para consulta de campanhas de doação.
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    angular.module('amApp')
        .controller('CampanhaController', CampanhaController);

    CampanhaController.$inject = ['campanhaService', 'DTOptionsBuilder', '$state', 'toastr'];

    function CampanhaController(campanhaService, DTOptionsBuilder, $state, toastr) {

        var vm = this;
        vm.campanhas = [];

        vm.dtOptions = DTOptionsBuilder.newOptions()
            .withPaginationType('simple_numbers').withDisplayLength(10).withBootstrap();

        /**
         *
         */
        vm.getCampanhas = function () {
            campanhaService.getCampanhasByInstituicao().then(function (response) {
                vm.campanhas = response.data;
            });
        }
        vm.getCampanhas();

        /**
         *
         */
        vm.addCampanha = function () {
            $state.go("home.campanha.edit", {campanhaEdit: null});
        }

        /**
         *
         * @param campanha
         */
        vm.editCampanha = function (campanha) {
            $state.go("home.campanha.edit", {campanhaEdit: campanha});
        }

        /**
         *
         * @param campanha
         */
        vm.openDetails = function (campanha) {
            $state.go("home.campanha.detail", {campanhaDetail: JSON.stringify(campanha)});
        }

        /**
         *
         * @param campanha
         */
        vm.remove = function (campanha) {
            var modalInstance = $uibModal
                .open({
                    animation: true,
                    templateUrl: "app/components/partials/dialog.confirm.html",
                    size: 'sm',
                    backdrop: false,
                    controller: ["$uibModalInstance", "$scope", function ($uibModalInstance, $scope) {
                        $scope.sim = function () {
                            $uibModalInstance.close(true);
                        }

                        $scope.cancelar = function () {
                            $uibModalInstance.dismiss('cancel');
                        }
                    }]
                });

            modalInstance.result.then(function (result) {
                if (result) {
                    categoriaService.remove(campanha.id, function () {
                        toastr.success("removida com sucesso", "Campanha");
                        var index = vm.campanhas.indexOf(campanha);
                        vm.campanhas.splice(index, 1);
                    });
                }
            });
        };


        vm.getDifferentDatesInDays = function (date1) {
            console.log(date1);
            var ONE_DAY = 1000 * 60 * 60 * 24
            var date1_ms = date1;
            var date2_ms = new Date().getTime();
            var difference_ms = Math.abs(date1_ms - date2_ms);
            return Math.round(difference_ms / ONE_DAY);

        };

    }
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Controller
 * @name InstituicaoEditController
 *
 * @description Controller para página de Edição de Instituição
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    angular.module("amApp")
        .controller("CategoriaEditController", ["categoriaService", "toastr", "$uibModalInstance", "categoria", function (categoriaService, toastr, $uibModalInstance, categoria) {

            var vm = this;
            vm.categoria = {};
            vm.loading = false;

            angular.copy(categoria, vm.categoria);

            if (!edited()) {
                vm.categoria.ativo = true;
            }

            /**
             * Editar/Salvar uma categoria
             */
            vm.save = function () {
                vm.loading = true;
                if (!edited()) {
                    categoriaService.save(vm.categoria, function (response) {
                        toastr.success('salvo com sucesso', 'Item');
                        angular.copy(response, categoria);
                        vm.loading = false;
                        $uibModalInstance.close(categoria);

                    }, function (response) {
                        var msgError = response.data.msg;
                        toastr.warning(msgError);
                        vm.loading = false;
                    });

                } else {
                    categoriaService.update(vm.categoria, function (response) {
                        toastr.success('alterado com sucesso', 'Item');
                        angular.copy(response, categoria);
                        vm.loading = false;
                        $uibModalInstance.close(categoria);

                    }, function (response) {
                        var msgError = response.data.msg;
                        toastr.warning(msgError);
                        angular.copy(response, categoria);
                        vm.loading = false;
                        $uibModalInstance.close(categoria);
                    });
                }
            };

            /**
             *
             */
            vm.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };

            /**
             *
             */
            function edited() {
                return vm.categoria.id ? true : false;
            };

            /**
             *
             * @returns {*}
             */
            vm.isEdited = function () {
                return edited();
            }
        }]);
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Route
 * @name amRoute
 *
 * @description mapeamento de estados para categoria
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular
        .module('amRoute')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {

        $stateProvider.state('home.categoria', {
            url: "/categoria",
            templateUrl: "app/components/categoria/categorias.html",
            controller: "CategoriaController",
            controllerAs: 'vm',
            data: {
                pageTitle: 'Itens Doáveis'
            }
        })
    }
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc controller
 * @name CategoriaController
 *
 * @description Controller para consulta de categorias de itens doaveis.
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    angular.module('amApp')
        .controller('CategoriaController', CategoriaController);

    CategoriaController.$inject = ['categoriaService', 'DTOptionsBuilder', '$uibModal', 'toastr'];

    function CategoriaController(categoriaService, DTOptionsBuilder, $uibModal, toastr) {

        var vm = this;
        vm.categorias = [];

        vm.dtOptions = DTOptionsBuilder.newOptions()
            .withPaginationType('simple_numbers').withDisplayLength(10).withBootstrap();

        /**
         *
         */
        vm.getCategorias = function () {
            categoriaService.getCategoriasByInstituicao(function (response) {
                vm.categorias = response;
            });
        }
        vm.getCategorias();

        /**
         *
         * @param categoria
         */
        function openModal(categoria) {
            return $uibModal.open({
                templateUrl: 'app/components/categoria/categoria.edit.html',
                controller: 'CategoriaEditController',
                controllerAs: 'vm',
                backdrop: 'static',
                resolve: {
                    categoria: function () {
                        return categoria;
                    }
                }
            });
        }

        /**
         *
         */
        vm.addCategoria = function () {
            var modal = openModal({});

            modal.result.then(function (categoria) {
                vm.categorias.push(categoria);
            });
        }

        /**
         *
         * @param categoria
         */
        vm.editCategoria = function (categoria) {
            openModal(categoria);
        }

        /**
         *
         * @param categoria
         */
        vm.remove = function (categoria) {
            var modalInstance = $uibModal
                .open({
                    animation: true,
                    templateUrl: "app/components/partials/dialog.confirm.html",
                    size: 'sm',
                    backdrop: false,
                    controller: ["$uibModalInstance", "$scope", function ($uibModalInstance, $scope) {
                        $scope.sim = function () {
                            $uibModalInstance.close(true);
                        }

                        $scope.cancelar = function () {
                            $uibModalInstance.dismiss('cancel');
                        }
                    }]
                });

            modalInstance.result.then(function (result) {
                if (result) {
                    categoriaService.remove(categoria.id, function (response) {

                        toastr.success("removido com sucesso", "Item");
                        var index = vm.categorias.indexOf(categoria);
                        vm.categorias.splice(index, 1);

                    }, function (response) {
                        var msgError = response.msg;
                        toastr.warning(msgError);

                    });
                }
            });
        };
    }
})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Route
 * @name amRoute
 *
 * @description mapeamento de estados para dashboards.
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular
        .module('amRoute')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {

        $stateProvider.state('home.dashboard', {
            url: "/dashboard",
            template: '<ui-view />'
        })
            .state('home.dashboard.admin', {
                url: "/admin",
                templateUrl: "app/components/dashboard/admin/dashboard.admin.html",
                controller: "DashboardAdminController",
                controllerAs: 'vm',
                data: {
                    pageTitle: 'Dashboard'
                }
            })
            .state('home.dashboard.instituicao', {
                url: "/instituicao",
                templateUrl: "app/components/dashboard/instituicao/dashboard.instituicao.html",
                controller: "DashboardInstController",
                controllerAs: 'vm',
                data: {
                    pageTitle: 'Dashboard'
                }
            })
    }
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Controller
 * @name DonativoDetailController
 *
 * @description Controller para página de visualização de detalhes de um danativo.
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    angular.module("amApp")
        .controller("DonativoDetailController", DonativoDetailController);

    DonativoDetailController.$inject = ['$stateParams', '$state', 'imageService'];

    function DonativoDetailController($stateParams, $state, imageService) {
        var vm = this;
        vm.donativo = {};
        var donativoDetailparam = JSON.parse($stateParams.donativoDetail);
        vm.images = [];
        vm.estado;
        vm.imageMsg;
        vm.mockImage = 'content/img/mock-user.png';

        if (donativoDetailparam) {
            vm.donativo = donativoDetailparam;
            getImages();
            vm.donativo.estadosDaDoacao.forEach(function (estado) {
                if (estado.ativo) {
                    vm.estado = estado;
                }
            });

            if (vm.donativo.mensageiro) {
                getImageMsg();
            }
        }

        function getImages() {
            vm.donativo.fotosDonativo.forEach(function (image) {
                _getImage(image);
            })
        }

        function getImageMsg() {
            _getImageMsg(vm.donativo.mensageiro.foto);
        }

        /**
         *
         * @param imageName
         */
        function _getImage(image) {
            if (image) {
                imageService.getImage(image.nome).then(function (response) {
                    var imageContent = {};
                    imageContent.contentType = image.contentType;
                    imageContent.content = _arrayBufferToBase64(response.data);
                    vm.images.push(imageContent);
                })
            }
        };

        /**
         * Recupera imagem mensageiro
         * @param imageName
         */
        function _getImageMsg(image) {
            if (image) {
                imageService.getImage(image.nome).then(function (response) {
                    vm.imageMsg = _arrayBufferToBase64(response.data);
                });
            }
        };

        /**
         *
         */
        vm.previus = function () {
            $state.go('home.donativo.list');
        };

        vm.getEtadosDonativo = function (estados) {
            var estadoAtivo;
            estados.forEach(function (estado) {
                if (estado.ativo) {
                    estadoAtivo = estado;
                }
            });
            return estadoAtivo.estadoDoacao;
        }

        vm.getHorarioAcceptedToColeta = function (horarios) {
            var selectedHorario;
            horarios.forEach(function (horario) {
                if (horario.ativo) {
                    selectedHorario = horario;
                }
            });
            return selectedHorario;
        }

        /**
         * Necessário para converter array de bytes para base64.
         * utilizado para recuperar foto da API.
         * @param buffer
         * @returns {string}
         * @private
         */
        function _arrayBufferToBase64(buffer) {
            var binary = '';
            var bytes = new Uint8Array(buffer);
            var len = bytes.byteLength;
            for (var i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        }
    }

})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Route
 * @name amRoute
 *
 * @description mapeamento de estados para acompanhamento de doações.
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular
        .module('amRoute')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {

        $stateProvider.state('home.donativo', {
            url: "/donativo",
            template: '<ui-view />'
        })
            .state('home.donativo.list', {
                url: "/list",
                templateUrl: "app/components/donativo/donativos.html",
                controller: "DonativoController",
                controllerAs: 'vm',
                data: {
                    pageTitle: 'Doações'
                }
            })
            .state('home.donativo.detail', {
                url: "/detail/:donativoDetail",
                templateUrl: "app/components/donativo/donativo.detail.html",
                controller: "DonativoDetailController",
                controllerAs: 'vm',
                data: {
                    pageTitle: 'Detalhes de Doação'
                }
            })
    }
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc controller
 * @name DonativoController
 *
 * @description Controller para consulta de donativos da instituição..
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
        angular.module('amApp')
            .controller('DonativoController', DonativoController);

        DonativoController.$inject = ['donativoService', 'DTOptionsBuilder', '$state', 'toastr'];

        function DonativoController(donativoService, DTOptionsBuilder, $state, toastr) {

            var vm = this;
            vm.donativos = [];

            vm.dtOptions = DTOptionsBuilder.newOptions()
                .withPaginationType('simple_numbers').withDisplayLength(10).withBootstrap();

            /**
             *
             */
            vm.getDonativos = function () {
                donativoService.getByInstituicao().then(function (response) {
                    vm.donativos = response.data;
                });
            }

            vm.getDonativos();

            vm.getEtadosDonativo = function (estados) {
                var estadoAtivo;
                estados.forEach(function (estado) {
                    if (estado.ativo) {
                        estadoAtivo = estado;
                    }
                });
                return estadoAtivo.estadoDoacao;
            }

            /**
             *
             * @param campanha
             */
            vm.openDetails = function (donativo) {
                $state.go("home.donativo.detail", {donativoDetail: JSON.stringify(donativo)});
            }
        }
    })
();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Route
 * @name amRoute
 *
 * @description mapeamento de estados para rotas de erros
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular
        .module('amRoute')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {

        $stateProvider.state('home.403', {
            url: '/403',
            templateUrl: 'app/components/erros/403/403.html',
            data: {
                pageTitle: 'Acesso Negado'
            }
        })
            .state('500', {
                url: '/500',
                templateUrl: 'app/components/erros/500/500.html',
                data: {
                    pageTitle: 'Erro no Servidor'
                }
            })
            .state('refused', {
                url: '/refused',
                templateUrl: 'app/components/erros/refused/refused.html',
                data: {
                    pageTitle: 'Erro na conexão com o servidor'
                }
            })
    }
})();})(window.angular);
(function(angular){
'use strict';
(function () {
    angular.module("amApp")
        .controller("InstituicaoDetailController", InstituicaoDetailController);

    InstituicaoDetailController.$inject = ['$stateParams', '$state'];

    function InstituicaoDetailController($stateParams, $state) {
        var vm = this;
        vm.instituicao = {};
        var instituicaoDetailparam = JSON.parse($stateParams.instituicaoDetail);

        if (instituicaoDetailparam) {
            vm.instituicao = instituicaoDetailparam;
        }

        /**
         *
         */
        vm.voltar = function () {
            $state.go('home.instituicao.list');
        };
    }


})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Controller
 * @name InstituicaoEditController
 *
 * @description Controller para página de Edição de Instituição
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    angular.module("amApp")
        .controller("InstituicaoEditController", InstituicaoEditController);

    InstituicaoEditController.$inject = ['instituicaoService', 'toastr', '$stateParams', '$state', 'viaCEP'];

    function InstituicaoEditController(instituicaoService, toastr, $stateParams, $state, viaCEP) {

        var vm = this;
        vm.instituicao = {};

        if ($stateParams.instituicaoEdit) {
            vm.instituicao = $stateParams.instituicaoEdit;
        } else {
            vm.instituicao.conta = {};
            vm.instituicao.conta.ativo = true;
        }

        /**
         * Editar/Salvar um instituição
         */
        vm.save = function () {
            if (!vm.isEdited()) {
                _setDefaultAccount(vm.instituicao);
                instituicaoService.save(vm.instituicao, function (response) {
                    toastr.success('criada com sucesso', 'Instituição');
                    $state.go('home.instituicao.list');
                }, function (response) {
                    var msgError = response.data.msg;
                    toastr.warning(msgError);
                });

            } else {
                instituicaoService.update(vm.instituicao, function (response) {
                    toastr.success('atualiada com sucesso', 'Instituição');
                    $state.go('home.instituicao.list');
                }, function (response) {
                    var msgError = response.data.msg;
                    toastr.warning(msgError);
                });
            }
        };

        /**
         *
         */
        vm.cancelar = function () {
            $state.go('home.instituicao.list');
        };

        /**
         *
         */
        vm.isEdited = function () {
            return vm.instituicao.id;
        };

        /**
         * obtém localidade pelo CEP
         *
         * @param cep
         */
        vm.getLocation = function (cep) {
            viaCEP.get(cep).then(function (response) {
                vm.instituicao.endereco = response;
                if (response) {
                    vm.instituicao.endereco.cep = formatCep(response.cep);
                }
            });
        }

        /**
         * Cria um conta default para uma instituição.
         * @param instituicao
         */
        function _setDefaultAccount(instituicao) {
            vm.instituicao.conta.username = instituicao.documento;
            vm.instituicao.conta.senha = instituicao.documento;
            vm.instituicao.conta.grupos = ['ROLE_INSTITUICAO'];
        }

        /**
         *
         * @param cep
         * @returns {string}
         */
        function formatCep(cep) {
            if (cep) {
                return cep.replace("-", "");
            } else {
                return "";
            }
        }
    };
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Route
 * @name amRoute
 *
 * @description mapeamento de estados para instituição
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular
        .module('amRoute')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {

        $stateProvider.state('home.instituicao', {
            url: "/instituicao",
            template: '<ui-view />'
        })
            .state('home.instituicao.list', {
                url: "/list",
                templateUrl: "app/components/instituicao/instituicoes.html",
                controller: "InstituicaoController",
                controllerAs: 'vm',
                data: {
                    pageTitle: 'Instituições'
                }
            })
            .state('home.instituicao.edit', {
                url: "/edit",
                templateUrl: "app/components/instituicao/instituicao.edit.html",
                controller: "InstituicaoEditController",
                controllerAs: 'vm',
                params: {
                    instituicaoEdit: null
                },
                data: {
                    pageTitle: 'Edição de Instituição'
                }
            })
            .state('home.instituicao.detail', {
                url: "/detail/:instituicaoDetail",
                templateUrl: "app/components/instituicao/instituicao.detail.html",
                controller: "InstituicaoDetailController",
                controllerAs: 'vm',
                data: {
                    pageTitle: 'Detalhes de Instituição'
                }
            })
    }
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc controller
 * @name DoadorController
 *
 * @description Controller para consulta de instituição.
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    angular.module('amApp')
        .controller('InstituicaoController', InstituicaoController);

    InstituicaoController.$inject = ['instituicaoService', 'DTOptionsBuilder', '$state'];

    function InstituicaoController(instituicaoService, DTOptionsBuilder, $state) {

        var vm = this;
        vm.instituicoes = [];

        vm.dtOptions = DTOptionsBuilder.newOptions()
            .withPaginationType('simple_numbers').withDisplayLength(10).withBootstrap();

        /**
         *
         */
        vm.getInstituicoes = function () {
            instituicaoService.getInstituicoes(function (response) {
                vm.instituicoes = response;
            });
        }
        vm.getInstituicoes();

        /**
         *
         */
        vm.addInstituicao = function () {
            $state.go("home.instituicao.edit", {instituicaoEdit: null});
        };

        /**
         *
         */
        vm.editInstituicao = function (instituicao) {
            $state.go("home.instituicao.edit", {instituicaoEdit: instituicao});
        };

        /**
         *
         * @param instituicao
         */
        vm.openDetails = function(instituicao) {
            $state.go("home.instituicao.detail", {instituicaoDetail: JSON.stringify(instituicao)});
        }
    }

})();
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Controller
 * @name InstituicaoEditController
 *
 * @description Controller para página de Edição de Instituição
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    MensageiroAssociadoEditController.$inject = ["mensageiroAssociadoService", "mensageiroService", "imageService", "toastr", "$uibModalInstance", "mensageiroAss"];
    angular.module("amApp")
        .controller("MensageiroAssociadoEditController", MensageiroAssociadoEditController);

    function MensageiroAssociadoEditController(mensageiroAssociadoService, mensageiroService, imageService, toastr, $uibModalInstance, mensageiroAss) {

        var vm = this;
        vm.mensageiroAss = {};
        vm.image;
        vm.mockImage = 'content/img/mock-user.png';

        angular.copy(mensageiroAss, vm.mensageiroAss);

        if (edited()) {
            _getImage(vm.mensageiroAss.mensageiro.foto);
        } else {
            vm.mensageiroAss.status = true;
            vm.mensageiroAss.data = new Date();
        }

        /**
         *
         * @param email
         */
        vm.findMensageiro = function (email) {
            return mensageiroService.findByContaEmail(email).then(function (response) {
                return response.data;
            });
        };

        vm.onSelect = function (mensageiro) {
            _getImage(mensageiro.foto);
        };

        /**
         *
         * @param imageName
         */
        function _getImage(image) {
            if (image) {
                imageService.getImage(image.nome).then(function (response) {
                    vm.image = _arrayBufferToBase64(response.data);
                })
            }
        };

        /**
         * remove mensageiro buscado.
         */
        vm.removeCurrentMensageiro = function () {
            if (!edited()) {
                vm.mensageiroAss.mensageiro = null;
            }
        }

        /**
         * Editar/Salvar uma associação entre mensageiro e instituição
         */
        vm.save = function () {
            if (vm.mensageiroAss.mensageiro != null) {
                vm.loading = true;
                if (edited()) {
                    mensageiroAssociadoService.update(vm.mensageiroAss, function (response) {
                        toastr.success('atualizado com sucesso', 'Mensageiro');
                        angular.copy(response, mensageiroAss);
                        vm.loading = false;
                        $uibModalInstance.close(mensageiroAss);
                    }, function (response) {
                        var msgError = response.data.msg;
                        toastr.warning(msgError);
                        vm.loading = false;
                    });
                } else {
                    mensageiroAssociadoService.save(vm.mensageiroAss, function (response) {
                        toastr.success('associado com sucesso', 'Mensageiro');
                        angular.copy(response, mensageiroAss);
                        vm.loading = false;
                        $uibModalInstance.close(mensageiroAss);
                    }, function (response) {
                        var msgError = response.data.msg;
                        toastr.warning(msgError);
                        vm.loading = false;
                    });
                }
            }
        };

        /**
         *
         */
        vm.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };


        /**
         * Necessário para converter array de bytes para base64.
         * utilizado para recuperar foto da API.
         * @param buffer
         * @returns {string}
         * @private
         */
        function _arrayBufferToBase64(buffer) {
            var binary = '';
            var bytes = new Uint8Array(buffer);
            var len = bytes.byteLength;
            for (var i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        }

        /**
         *
         */
        function edited() {
            return vm.mensageiroAss.id ? true : false;
        };

        /**
         *
         * @returns {*}
         */
        vm.isEdited = function () {
            return edited();
        }
    };
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc Route
 * @name amRoute
 *
 * @description mapeamento de estados para mensageiro associado.
 *
 * @author <a href="https://franckaj.github.io/">Franck Aragão</a>
 */

(function () {
    angular
        .module('amRoute')
        .config(stateConfig);

    stateConfig.$inject = ['$stateProvider'];

    function stateConfig($stateProvider) {

        $stateProvider.state('home.mensageirosAss', {
            url: "/mensageirosAssociados",
            templateUrl: "app/components/mensageiroAssociado/mensageiros-associados.html",
            controller: "MensageiroAssociadoController",
            controllerAs: 'vm',
            data: {
                pageTitle: 'Mensageiros Associados'
            }
        })
    }
})();})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc controller
 * @name mensageiroAssociadoService
 *
 * @description Controller para consulta de mensageiros associados
 *
 * @author <a href="https://github.com/FranckAJ">Franck Aragão</a>
 */
(function () {
    angular.module('amApp')
        .controller('MensageiroAssociadoController', MensageiroAssociadoController);

    MensageiroAssociadoController.$inject = ['mensageiroAssociadoService', 'DTOptionsBuilder', '$uibModal'];

    function MensageiroAssociadoController(mensageiroAssociadoService, DTOptionsBuilder, $uibModal) {

        var vm = this;
        vm.associados = [];

        vm.dtOptions = DTOptionsBuilder.newOptions()
            .withPaginationType('simple_numbers').withDisplayLength(10).withBootstrap();

        /**
         * Busca todos os mensageiros associados a instituição logada.
         */
        vm.getMensageirosAssociados = function () {
            mensageiroAssociadoService.getByInstituicao(function (response) {
                vm.associados = response;
            });
        }
        vm.getMensageirosAssociados();


        /**
         * Abre modal, configurando template e controller
         * @param categoria
         */
        function openModal(mensageiroAss) {
            return $uibModal.open({
                templateUrl: 'app/components/mensageiroAssociado/mensageiro-associado.edit.html',
                controller: 'MensageiroAssociadoEditController',
                controllerAs: 'vm',
                backdrop: 'static',
                resolve: {
                    mensageiroAss: function () {
                        return mensageiroAss;
                    }
                }
            });
        }

        /**
         *
         */
        vm.addAssociacao = function () {
            var modal = openModal({});

            modal.result.then(function (mensageiroAss) {
                vm.associados.push(mensageiroAss);
            });
        }

        /**
         *
         * @param categoria
         */
        vm.editAssociacao = function (mensageiroAss) {
            openModal(mensageiroAss);
        }
    }
})();
})(window.angular);
(function(angular){
'use strict';
(function(){angular.module('templates', []).run(['$templateCache', function($templateCache) {$templateCache.put('app/layouts/layout.html','<div ng-controller="SidebarCtrl"><div id="page-wrapper" ng-class="{\'open\': toggle}" ng-cloak><menu toggle="toggleSidebar()"></menu><div id="content-wrapper"><div class="page-content"><div class="row header"><div class="col-xs-12"><span ng-click="toggleSidebar()" ng-class="{\'hide\': toggle}" class="menu-icon fa fa-bars"></span><header-notification></header-notification></div></div><div class="am-growl"><div growl id="loading-bar-container"></div></div><page-header></page-header><div ui-view></div></div></div></div></div>');
$templateCache.put('app/components/auth/login.html','<div class="container"><div class="row"><div class="col-md-5 col-md-offset-3"><div class="login-logo"><img alt="AjudeMais" max-widget="90%" src="content/img/am-icon (4).png"></div><div class="login-panel panel panel-default"><div class="panel-heading"><h3 class="panel-title">Efetuar Login</h3></div><div class="panel-body"><div ng-if="vm.error" class="alert alert-danger">{{vm.error}}</div><form name="loginForm" role="form" ng-submit="loginForm.$valid && vm.doLogin()" novalidate><fieldset><div class="form-group has-feedback" ng-class="{ \'has-error\': loginForm.$submitted && loginForm.username.$invalid }"><input id="tLogin" class="form-control input-lg" ng-model="vm.account.username" placeholder="Usu\xE1rio" name="username" type="text" autofocus required> <span class="glyphicon glyphicon-user form-control-feedback" aria-hidden="true"></span><div ng-show="loginForm.$submitted && loginForm.username.$invalid" class="help-block">Nome do Usu\xE1rio deve ser informado</div></div><div class="form-group has-feedback" ng-class="{ \'has-error\': loginForm.$submitted && loginForm.senha.$invalid }"><input id="tSenha" class="form-control input-lg" ng-model="vm.account.senha" placeholder="Senha" name="senha" type="password" required> <span class="glyphicon glyphicon-lock form-control-feedback" aria-hidden="true"></span><div ng-show="loginForm.$submitted && loginForm.senha.$invalid" class="help-block">Senha deve ser informada</div></div><!--<div class="checkbox icheck">\n                                 <label>\n                                     <input icheck id="rememberme" name="remember-me" type="checkbox" ng-value="remember-me" ng-model="vm.remember"> Lembre-me\n                                 </label>\n                             </div>--><br><input id="btnLogin" type="submit" class="btn btn-lg btn-primary btn-block" value="Login"></fieldset></form></div></div><p class="caps-lock-alert text-right text-primary" ng-show="isCapsLockOn"><i class="fa fa-lock"></i> Tecla Caps lock esta ativada</p></div></div></div>');
$templateCache.put('app/components/campanha/campanha.detail.html','<div class="row"><div class="col-lg-12"><div class="box box-primary"><div class="box-header"><h2 class="box-title">Informa\xE7\xF5es Gerais</h2></div><div class="row box-topic"><div class="col-lg-6"><div class="table-responsive am-no-border-table"><table class="table"><tr><th width="30%">Nome da Campanha</th><td>{{vm.campanha.nome}}</td></tr><tr><th width="30%">Descri\xE7\xE3o</th><td>{{vm.campanha.descricao}}</td></tr><tr><th>Status</th><td><span ng-class="{\'label label-danger\': !vm.campanha.status,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\'label label-success\': vm.campanha.status}">{{vm.campanha.status? \'Ativo\': \'Inativo\'}}</span></td></tr><tr ng-show="vm.campanha.status"><th>Data de t\xE9rmino</th><td>{{vm.campanha.dataFim | date : "dd/MM/yyyy" }}</td></tr></table></div></div></div></div><div class="box box-primary"><div class="box-header"><h2 class="box-title">Metas da Campanha</h2></div><div class="row"><div class="col-md-12"><table class="table" ng-show="vm.campanha.metas.length"><thead><tr><th width="20%">Nome</th><th width="30%">Descri\xE7\xE3o</th><th width="20%">Quantidade</th><th width="10%">Un. Medida</th><th width="10%">% atingido</th></tr></thead><tbody><tr class="odd gradeX" ng-repeat="meta in vm.campanha.metas"><td>{{meta.categoria.nome}}</td><td>{{meta.categoria.descricao}}</td><td>{{meta.quantidade}}</td><td>{{meta.unidadeMedida | capitalize}}</td><td>{{meta.percentualAtingido}}%</td></tr></tbody></table></div></div></div><div class="row form-group"><button class="btn btn-default" type="button" ng-click="vm.previus()">Voltar</button></div></div></div>');
$templateCache.put('app/components/campanha/campanha.edit.html','<div class="row"><div class="col-lg-12"><form name="campanhaForm" ng-submit="campanhaForm.$valid && vm.save()" role="form" novalidate><div class="box box-primary"><div class="box-header with-border box-topic"><h3 class="box-title">Informa\xE7\xF5es gerais</h3></div><div class="row box-topic"><div class="col-lg-12"><div class="form-group" ng-class="{ \'has-error\': campanhaForm.$submitted && campanhaForm.nome.$invalid }"><label class="control-label" for="nome">Nome</label><input name="nome" id="nome" ng-model="vm.campanha.nome" type="text" class="form-control" required><div ng-show="campanhaForm.$submitted && campanhaForm.nome.$invalid" class="help-block">Nome deve ser informado</div></div></div></div><div class="row"><div class="col-lg-12"><div class="form-group" ng-class="{ \'has-error\': campanhaForm.$submitted && campanhaForm.descricao.$invalid }"><label class="control-label" for="nome">Descri\xE7\xE3o</label><textarea id="descricao" maxlength="220" name="descricao" ng-model="vm.campanha.descricao" class="form-control" rows="3" id="comment" required></textarea><div ng-show="campanhaForm.$submitted && campanhaForm.descricao.$invalid" class="help-block">A descri\xE7\xE3o deve ser informada</div></div></div></div><div class="row"><div class="form-group col-sm-2"><label class="control-label" for="status">Status</label><br><input bs-switch name="ativo" ng-model="vm.campanha.status" id="status" switch-on-text="Ativa" switch-off-text="Inativa" switch-size="normal" switch-off-color="danger" type="checkbox" class="form-control"></div><div class="form-group col-sm-4" ng-class="{ \'has-error\': campanhaForm.$submitted && campanhaForm.tDateEnd.$invalid }"><label class="control-label" for="tDateEnd">T\xE9rmino</label><div class="input-group"><input type="text" class="form-control" uib-datepicker-popup="dd/MM/yyyy" ng-model="vm.campanha.dataFim" date-after="vm.currentDate" date-or-equals="true" date-disabled="!vm.campanha.status" is-open="vm.dtpk" ng-disabled="!vm.campanha.status" datepicker-options="dateOptions" ng-required="vm.campanha.status" id="tDateEnd" name="tDateEnd" current-text="Hoje" clear-text="Limpar" close-text="Fechar" ng-click="vm.openDtpk()"> <span class="input-group-btn"><button type="button" class="btn btn-default" ng-disabled="!vm.campanha.status" ng-click="vm.openDtpk(1)"><i class="glyphicon glyphicon-calendar"></i></button></span></div><div ng-show="campanhaForm.$submitted && campanhaForm.tDateEnd.$invalid && !campanhaForm.tDateEnd.$error.dateAfter" class="help-block">Data de t\xE9rmino deve ser informada</div><div ng-show="campanhaForm.$submitted && campanhaForm.tDateEnd.$error.dateAfter" class="help-block">T\xE9rmino deve ser maior que a data atual</div></div></div></div><div class="box box-primary"><div class="box-header with-border box-topic"><h3 class="box-title">Metas para campanha</h3></div><div class="form-group row box-topic"><div class="col-sm-4" ng-class="{ \'has-error\': !vm.isCtgNotEmpty}"><div class="input-group col-sm-12"><input ng-="vm.meta.categoria != undefined ? vm.isCtgNotEmpty = true : vm.isCtgNotEmpty = false" type="text" ng-model="vm.meta.categoria" class="form-control" ng-disabled="vm.isEditMeta" placeholder="Nome do Item" typeahead-on-select="vm.onSelect($model)" uib-typeahead="item as item.nome for item in vm.findByName($viewValue)" typeahead-loading="loadingMens" typeahead-no-results="noResults" typeahead-editable="false" typeahead-template-url="app/components/partials/item-card-search.html"> <span class="input-group-btn"><button type="button" class="btn btn-primary" ng-click="vm.addItem()" uib-tooltip="Cadastro R\xE1pido de Item Do\xE1vel"><i class="fa fa-plus"></i></button></span></div><div ng-show="!vm.isCtgNotEmpty" class="help-block">O item deve ser informado.</div></div><div class="col-sm-3" ng-class="{ \'has-error\': !vm.isUnMediadeNotEmpty}"><select ng-change="vm.meta.unidadeMedida != null ? vm.isUnMediadeNotEmpty = true: vm.isUnMediadeNotEmpty = false" ng-model="vm.meta.unidadeMedida" class="form-control" ng-disabled="vm.isEditMeta"><option value="">Selecione</option><option value="UNIDADE">Unidade</option><option value="QUILOGRAMA">Quilograma</option><option value="LITRO">Litro</option></select><div ng-show="!vm.isUnMediadeNotEmpty" class="help-block">A unidade de medida deve ser informada.</div></div><div class="col-sm-2" ng-class="{ \'has-error\': !vm.isQtdNotEmpty}"><input ng-change="vm.meta.unidadeMedida != null ? vm.isQtdNotEmpty = true: vm.isQtdNotEmpty = false" min="1" type="number" ng-model="vm.meta.quantidade" class="form-control" placeholder="Quantidade"><div ng-show="!vm.isQtdNotEmpty" class="help-block">Quantidade inv\xE1lida.</div></div><div class="col-sm-3"><button type="button" ng-click="vm.setMeta(vm.meta)" class="btn btn-primary" uib-tooltip="{{vm.isEditMeta ? \'Editar meta\': \'Adicionar Meta\'}}">{{vm.isEditMeta ? "Editar" : "Adicionar"}}</button></div></div><div class="row"><div class="col-sm-12" ng-show="vm.campanha.metas.length"><table class="table"><thead><tr><th width="8%">#</th><th width="20%">Nome</th><th width="40%">Descri\xE7\xE3o</th><th width="20%">Quantidade</th><th width="20%">Un. Medida</th></tr></thead><tbody><tr class="odd gradeX" ng-repeat="meta in vm.campanha.metas"><td><button ng-disabled="meta.id != null" type="button" ng-click="vm.removeMeta(meta)" tooltip-placement="top" uib-tooltip="Remover Item" class="btn btn-xs btn-danger" access-view="ROLE_INSTITUICAO"><i class="fa fa-trash"></i></button> <button type="button" ng-click="vm.editMeta(meta)" class="btn btn-xs btn-default" tooltip-placement="top" uib-tooltip="Editar Meta" access-view="ROLE_INSTITUICAO"><i class="fa fa-pencil"></i></button></td><td>{{meta.categoria.nome}}</td><td>{{meta.categoria.descricao}}</td><td>{{meta.quantidade}}</td><td>{{meta.unidadeMedida | capitalize}}</td></tr></tbody></table></div></div><div class="row"><div class="col-sm-12" ng-show="!vm.campanha.metas.length"><div class="well">Nenhuma meta adicionada.</div></div></div></div><div class="form-group"><input class="btn btn-primary" type="submit" value="{{vm.isEdited() ? \'Alterar\':\'Salvar\' }}"> <button class="btn btn-default" type="button" ng-click="vm.cancelar()">Cancelar</button></div></form></div></div>');
$templateCache.put('app/components/campanha/campanhas.html','<div class="row"><div class="col-lg-12"><div class="box box-primary"><div class="row"><div class="col-lg-12"><div class="pull-right"><button type="button" class="btn am-btn-new btn-primary" ng-click="vm.addCampanha()" tooltip-placement="top" uib-tooltip="cadastrar nova campanha de doa\xE7\xE3o"><i class="fa fa-plus-circle"></i> <span class="hidden-xs hidden-sm">Nova Campanha</span></button></div></div><div class="row"><div class="col-lg-12"><div class="dataTable_wrapper"><table datatable="ng" dt-options="vm.dtOptions" class="table table-striped table-bordered table-hover" id="dtCampanhas"><thead><tr><th width="10%">A\xE7\xF5es</th><th width="25%">Nome</th><th width="40%">Descri\xE7\xE3o</th><th width="15%">T\xE9rmino</th><th width="10%">Status</th></tr></thead><tbody><tr class="odd gradeX" ng-repeat="campanha in vm.campanhas"><td><button type="button" ng-click="vm.openDetails(campanha)" tooltip-placement="top" uib-tooltip="Visualizar campanha de doa\xE7\xE3o" class="btn btn-xs btn-primary" access-view="ROLE_INSTITUICAO"><i class="fa fa-search"></i></button> <button type="button" ng-click="vm.editCampanha(campanha)" class="btn btn-xs btn-default" tooltip-placement="top" uib-tooltip="Editar campanha de doa\xE7\xE3o" access-view="ROLE_INSTITUICAO"><i class="fa fa-pencil"></i></button></td><td>{{campanha.nome}}</td><td>{{campanha.descricao}}</td><td><span ng-show="campanha.status">{{campanha.dataFim | date : "dd/MM/yyyy" }}</span> <span ng-show="!campanha.status">Campanha Inativa</span></td><td><span ng-class="{\'label label-danger\': !campanha.status,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\'label label-success\': campanha.status}">{{campanha.status? \'Ativo\': \'Inativo\'}}</span></td></tr></tbody></table></div></div></div></div></div></div></div>');
$templateCache.put('app/components/categoria/categoria.edit.html','<form name="categoriaForm" ng-submit="categoriaForm.$valid && vm.save()" role="form" novalidate><div class="modal-header"><button type="button" ng-click="vm.cancel()" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></button><h4 class="modal-title">Edi\xE7\xE3o Itens Do\xE1veis</h4></div><div class="modal-body row" id="modal-body-categoria"><div class="form-group am-required col-sm-8" ng-class="{\'has-error\': categoriaForm.$submitted && categoriaForm.nome.$invalid}"><label class="control-label">Nome</label><input name="nome" ng-model="vm.categoria.nome" type="text" class="form-control" required><div ng-show="categoriaForm.$submitted && categoriaForm.nome.$invalid" class="help-block">Nome deve ser informado</div></div><div class="form-group am-required col-sm-4" ng-class="{\'has-error\': categoriaForm.$submitted && categoriaForm.ativo.$invalid}"><label class="control-label">Ativo</label><br><input bs-switch name="ativo" switch-on-text="Sim" switch-off-text="N\xE3o" switch-size="normal" ng-model="vm.categoria.ativo" type="checkbox" class="form-control"></div><div class="form-group am-required col-sm-12" ng-class="{\'has-error\': categoriaForm.$submitted && categoriaForm.descricao.$invalid}"><label class="control-label" for="descricao-categoria-item">Descri\xE7\xE3o</label><textarea name="descricao" id="descricao-categoria-item" ng-model="vm.categoria.descricao" maxlength="320" type="text" class="form-control" required></textarea><div ng-show="categoriaForm.$submitted && categoriaForm.descricao.$invalid" class="help-block">Descri\xE7\xE3o deve ser informada</div></div></div><div class="modal-footer"><input class="btn btn-primary" type="submit" value="{{vm.isEdited() ? \'Alterar\':\'Salvar\' }}"> <button class="btn btn-default" type="button" ng-click="vm.cancel()">Cancelar</button></div><div class="overlay" ng-show="vm.loading"><i class="fa fa-refresh fa-spin"></i></div></form>');
$templateCache.put('app/components/categoria/categorias.html','<div class="row"><div class="col-lg-12"><div class="box box-primary"><div class="row"><div class="col-lg-12"><div class="pull-right"><button type="button" class="btn am-btn-new btn-primary" ng-click="vm.addCategoria()" tooltip-placement="top" uib-tooltip="cadastrar novo item do\xE1vel"><i class="fa fa-plus-circle"></i> <span class="hidden-xs hidden-sm">Novo Item</span></button></div></div><div class="row"><div class="col-lg-12"><table datatable="ng" dt-options="vm.dtOptions" class="table table-striped table-bordered table-hover" id="dtCategorias"><thead><tr><th width="10%">A\xE7\xF5es</th><th width="25%">Nome</th><th width="50%">Descri\xE7\xE3o</th><th width="10%">Ativo</th></tr></thead><tbody><tr class="odd gradeX" ng-repeat="categoria in vm.categorias"><td><button type="button" ng-click="vm.editCategoria(categoria)" class="btn btn-xs btn-default" tooltip-placement="top" uib-tooltip="Editar Categoria" access-view="ROLE_INSTITUICAO"><i class="fa fa-pencil"></i></button> <button type="button" ng-click="vm.remove(categoria)" tooltip-placement="top" uib-tooltip="Remover Categoria" class="btn btn-xs btn-danger" access-view="ROLE_INSTITUICAO"><i class="fa fa-trash"></i></button></td><td>{{categoria.nome}}</td><td>{{categoria.descricao}}</td><td><span ng-class="{\'label label-danger\': !categoria.ativo,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\'label label-success\': categoria.ativo}">{{categoria.ativo? \'Sim\': \'N\xE3o\'}}</span></td></tr></tbody></table></div></div></div></div></div></div>');
$templateCache.put('app/components/donativo/donativo.detail.html','<div class="row"><div class="col-lg-12"><div class="box box-primary"><div class="box-header"><h2 class="box-title">Informa\xE7\xF5es Gerais</h2></div><div class="row box-topic"><div class="col-lg-6"><div class="table-responsive am-no-border-table"><table class="table"><tr><th width="10%">Donativo</th><td>{{vm.donativo.nome}}</td></tr><tr><th width="10%">Descri\xE7\xE3o</th><td>{{vm.donativo.descricao}}</td></tr><tr><th width="30%">Qtd de Itens doados</th><td>{{vm.donativo.quantidade}}</td></tr><tr><th width="30%">Categoria</th><td>{{vm.donativo.categoria.nome}}</td></tr><tr><th>Estado</th><td><span class="{{vm.estado.estadoDoacao | status}}">{{vm.estado.estadoDoacao == \'NAO_ACEITO\' ? \'N\xC3O ACEITO\' : vm.estado.estadoDoacao == \'CANCELADO_POR_MENSAGEIRO\' ? \'CANCELADO\':vm.estado.estadoDoacao}}</span></td></tr></table></div></div><div ng-show="vm.donativo.fotosDonativo && vm.donativo.fotosDonativo.size()>0"><span class="am-image-donor-header"><b>Imagens do Item</b></span><div class="am-image-donor-grid" ng-repeat="image in vm.images"><div class="col-sm-2"><img class="img-responsive img-thumbnail" data-ng-src="data:{{image.contentType}};base64,{{image.content}}"></div></div></div></div></div><div class="box box-primary" ng-show="!vm.donativo.mensageiro"><div class="box-header"><h2 class="box-title">Hor\xE1rios de coleta</h2></div><div class="row box-topic"><div class="col-md-12"><div class="table-responsive"><table class="table"><thead><tr><th width="50%">In\xEDcio</th><th width="50%">Fim</th></tr></thead><tbody><tr ng-repeat="horario in vm.donativo.horariosDisponiveis"><td>{{horario.horaInicio | date: "dd/MM/yyyy HH:mm"}}</td><td>{{horario.horaFim | date: "dd/MM/yyyy HH:mm"}}</td></tr></tbody></table></div></div></div></div><div class="box box-primary" ng-show="vm.donativo.mensageiro"><div class="box-header"><h2 class="box-title">Agendamento da coleta</h2></div><div class="row box-topic"><div class="col-md-12"><div class="user-block"><img class="img-responsive img-circle" ng-show="vm.donativo.mensageiro.foto && vm.imageMsg" data-ng-src="data:{{vm.donativo.mensageiro.foto.contentType}};base64,{{vm.imageMsg}}"> <img class="img-responsive img-circle" ng-show="!vm.donativo.mensageiro.foto" ng-src="{{vm.mockImage}}"> <span class="username">{{vm.donativo.mensageiro.nome}} </span><span class="description">{{vm.donativo.mensageiro.telefone}} - {{vm.donativo.mensageiro.conta.email}}</span> <span class="description">{{vm.mensageiroAss.mensageiro.telefone}}</span></div><div class="table-responsive box-topic"><table class="table"><thead><tr><th width="50%">In\xEDcio</th><th width="50%">Fim</th></tr></thead><tbody><tr><td>{{vm.getHorarioAcceptedToColeta(vm.donativo.horariosDisponiveis).horaInicio | date: "dd/MM/yyyy HH:mm"}}</td><td>{{vm.getHorarioAcceptedToColeta(vm.donativo.horariosDisponiveis).horaFim | date: "dd/MM/yyyy HH:mm"}}</td></tr></tbody></table></div></div></div></div><div class="box box-primary"><div class="box-header"><h2 class="box-title">Endere\xE7o de Coleta</h2></div><div><div class="row box-topic"><div class="col-lg-6"><div class="table-responsive am-no-border-table"><table class="table"><tr><th width="10%">Logradouro</th><td>{{vm.donativo.endereco.logradouro}}</td></tr><tr><th width="10%">N\xFAmero</th><td>{{vm.donativo.endereco.numero}}</td></tr><tr><th width="10%">Bairro</th><td>{{vm.donativo.endereco.bairro}}</td></tr></table></div></div><div class="col-lg-6"><div class="table-responsive am-no-border-table"><table class="table"><tr ng-show="!!vm.donativo.endereco.complemento"><th width="10%">Completamento</th><td>{{vm.donativo.endereco.complemento}}</td></tr><tr><th width="10%">Localidade</th><td>{{vm.donativo.endereco.localidade}}</td></tr><tr><th width="10%">UF</th><td>{{vm.donativo.endereco.uf}}</td></tr></table></div></div></div></div></div><div class="box box-primary"><div class="box-header"><h2 class="box-title">Doador</h2></div><div class="row box-topic"><div class="col-md-12"><div class="table-responsive am-no-border-table"><table class="table"><tr><th width="10%">Doador</th><td>{{vm.donativo.doador.nome}}</td></tr><tr><th width="10%">Telefone</th><td>{{vm.donativo.doador.telefone}}</td></tr><tr><th width="10%">E-mail</th><td>{{vm.donativo.doador.conta.email}}</td></tr></table></div></div></div></div><div class="row form-group"><button class="btn btn-default" type="button" ng-click="vm.previus()">Voltar</button></div></div></div>');
$templateCache.put('app/components/donativo/donativos.html','<div class="row"><div class="col-lg-12"><div class="box box-primary"><div class="row"><div class="col-lg-12"><div class="dataTable_wrapper"><table datatable="ng" dt-options="vm.dtOptions" class="table table-striped table-bordered table-hover" id="dtDonativos"><thead><tr><th width="8%">A\xE7\xF5es</th><th width="25%">Donativo</th><th width="25%">Categotia</th><th width="8%">Qtd</th><th width="25%">Doador</th><th width="15%">Estado</th></tr></thead><tbody><tr class="odd gradeX" ng-repeat="donativo in vm.donativos"><td><button type="button" ng-click="vm.openDetails(donativo)" tooltip-placement="top" uib-tooltip="Visualizar Doa\xE7\xE3o" class="btn btn-xs btn-primary" access-view="ROLE_INSTITUICAO"><i class="fa fa-search"></i></button></td><td>{{donativo.nome}}</td><td>{{donativo.categoria.nome}}</td><td>{{donativo.quantidade}}</td><td>{{donativo.doador.nome}}</td><td><span class="{{vm.getEtadosDonativo(donativo.estadosDaDoacao) | status}}">{{vm.getEtadosDonativo(donativo.estadosDaDoacao) == \'NAO_ACEITO\' ? \'N\xC3O ACEITO\' : vm.getEtadosDonativo(donativo.estadosDaDoacao) == \'CANCELADO_POR_MENSAGEIRO\' ? \'CANCELADO\' : vm.getEtadosDonativo(donativo.estadosDaDoacao)}}</span></td></tr></tbody></table></div></div></div></div></div></div>');
$templateCache.put('app/components/instituicao/instituicao.detail.html','<div class="row"><div class="col-lg-12"><div class="box box-primary"><div class="box-header"><h2 class="box-title">Informa\xE7\xF5es Gerais</h2></div><div class="row box-topic"><div class="col-lg-6"><div class="table-responsive am-no-border-table"><table class="table"><tr><th width="30%">Nome da Intitui\xE7\xE3o</th><td>{{vm.instituicao.nome}}</td></tr><tr><th width="30%">Descri\xE7\xE3o</th><td>{{vm.instituicao.descricao}}</td></tr><tr><th>CPF/CNPJ</th><td>{{vm.instituicao.documento | brCpfCnpj}}</td></tr><tr><th>Telefone</th><td>{{vm.instituicao.telefone | brPhoneNumber}}</td></tr></table></div></div></div></div><div class="box box-primary"><div class="box-header"><h2 class="box-title">Endere\xE7o</h2></div><div><div class="row box-topic"><div class="col-lg-6"><div class="table-responsive am-no-border-table"><table class="table"><tr><th width="30%">Logradouro</th><td>{{vm.instituicao.endereco.logradouro}}</td></tr><tr><th>N\xFAmero</th><td>{{vm.instituicao.endereco.numero}}</td></tr><tr><th>Bairro</th><td>{{vm.instituicao.endereco.bairro}}</td></tr></table></div></div><div class="col-lg-6"><div class="table-responsive am-no-border-table"><table class="table"><tr ng-show="!!vm.instituicao.endereco.complemento"><th width="30%">Completamento</th><td>{{vm.instituicao.endereco.complemento}}</td></tr><tr><th>Localidade</th><td>{{vm.instituicao.endereco.localidade}}</td></tr><tr><th>UF</th><td>{{vm.instituicao.endereco.uf}}</td></tr></table></div></div></div></div></div><div class="box box-primary"><div class="box-header"><h2 class="box-title">Conta</h2></div><div class="row box-topic"><div class="col-lg-6"><div class="table-responsive am-no-border-table"><table class="table"><tr><th width="30%">E-mail</th><td>{{vm.instituicao.conta.email}}</td></tr><tr><th>Nome de Usu\xE1rio</th><td>{{vm.instituicao.conta.username}}</td></tr><tr><th>Senha alterada</th><td ng-if="vm.instituicao.conta.resetSenha">{{vm.instituicao.conta.resetSenha | date: "dd/MM/yyyy hh:mm:ss"}}</td><td ng-if="!vm.instituicao.conta.resetSenha">N\xE3o alterada</td></tr><tr><th>Status da conta</th><td><span ng-class="{\'label label-danger\': !vm.instituicao.conta.ativo,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\'label label-success\': vm.instituicao.conta.ativo}">{{vm.instituicao.conta.ativo? \'Ativa\': \'Inativa\'}}</span></td></tr></table></div></div></div></div><div class="row form-group"><button class="btn btn-default" type="button" ng-click="vm.voltar()">Voltar</button></div></div></div>');
$templateCache.put('app/components/instituicao/instituicao.edit.html','<div class="row"><div class="col-lg-12"><form name="instituicaoForm" ng-submit="instituicaoForm.$valid && vm.save()" role="form" novalidate><div class="box box-primary"><div class="box-header with-border box-topic"><h3 class="box-title">Informa\xE7\xF5es gerais</h3></div><div class="row box-topic"><div class="col-lg-8"><div class="form-group am-required" ng-class="{ \'has-error\': instituicaoForm.$submitted && instituicaoForm.nome.$invalid }"><label class="control-label" for="nome">Nome</label><input name="nome" id="nome" ng-model="vm.instituicao.nome" type="text" class="form-control" required><div ng-show="instituicaoForm.$submitted && instituicaoForm.nome.$invalid" class="help-block">Nome deve ser informado</div></div></div><div class="col-lg-4"><div class="form-group am-required" ng-class="{ \'has-error\': instituicaoForm.$submitted && instituicaoForm.documento.$invalid }"><label class="control-label">CPF/CNPJ</label><input name="documento" id="documento" ng-model="vm.instituicao.documento" ng-disabled="vm.isEdited()" type="text" class="form-control" ui-br-cpfcnpj-mask required><div ng-show="instituicaoForm.$submitted && instituicaoForm.documento.$invalid" class="help-block">CPF ou CNPJ deve ser informado corretamente</div></div></div></div><div class="row"><div class="col-lg-12"><div class="form-group am-required" ng-class="{ \'has-error\': instituicaoForm.$submitted && instituicaoForm.descricao.$invalid }"><label class="control-label" for="nome">Descri\xE7\xE3o</label><textarea id="descricao" maxlength="220" placeholder="Descreva uma breve introdu\xE7\xE3o sobre a institui\xE7\xE3o" name="descricao" ng-model="vm.instituicao.descricao" class="form-control" rows="3" id="comment" required></textarea><div ng-show="instituicaoForm.$submitted && instituicaoForm.descricao.$invalid" class="help-block">A descri\xE7\xE3o deve ser informada</div></div></div></div><div class="row"><div class="col-lg-4"><div class="form-group am-required" ng-class="{ \'has-error\': instituicaoForm.$submitted && instituicaoForm.telefone.$invalid }"><label class="control-label" for="telefone">Telefone</label><input name="telefone" id="telefone" ng-model="vm.instituicao.telefone" type="text" class="form-control" required ui-br-phone-number><div ng-show="instituicaoForm.$submitted && instituicaoForm.telefone.$invalid" class="help-block">Telefone deve ser informado corretamente</div></div></div><div class="col-lg-5"><div class="form-group am-required" ng-class="{ \'has-error\': instituicaoForm.$submitted && instituicaoForm.email.$invalid }"><label class="control-label" for="email">E-mail</label><input name="email" id="email" ng-model="vm.instituicao.conta.email" type="email" class="form-control" required><div ng-show="instituicaoForm.$submitted && instituicaoForm.email.$invalid" class="help-block">E-mail deve ser informado corretamente</div></div></div><div class="form-group am-required col-lg-3" ng-class="{\'has-error\': instituicaoForm.$submitted && instituicaoForm.ativo.$invalid}"><label class="control-label">Status</label><br><input bs-switch name="ativo" ng-model="vm.instituicao.conta.ativo" switch-on-text="Ativa" switch-off-text="Inativa" switch-size="normal" switch-off-color="danger" type="checkbox" class="form-control"></div></div><div class="box-header with-border box-topic"><h3 class="box-title">Endere\xE7o</h3></div><div class="row box-topic"><div class="col-lg-3"><div class="form-group am-required" ng-class="{ \'has-error\': instituicaoForm.$submitted && instituicaoForm.zipCode.$invalid }"><label class="control-label" for="zipCode">CEP</label><div class="input-group"><input name="zipCode" id="zipCode" ng-model="vm.instituicao.endereco.cep" type="text" class="form-control" required ui-br-cep-mask> <span class="input-group-btn"><button class="btn btn-default" tooltip-placement="top" uib-tooltip="Buscar endere\xE7o pelo CEP" ng-click="vm.getLocation(vm.instituicao.endereco.cep)" type="button"><i class="fa fa-search"></i></button></span></div><div ng-show="instituicaoForm.$submitted && instituicaoForm.zipCode.$invalid" class="help-block">CEP deve ser informado corretamente</div></div></div><div class="col-lg-4"><div class="form-group am-required" ng-class="{ \'has-error\': instituicaoForm.$submitted && instituicaoForm.logradouro.$invalid }"><label class="control-label" for="logradouro">Logradouro</label><input name="logradouro" id="logradouro" ng-model="vm.instituicao.endereco.logradouro" type="text" class="form-control" required><div ng-show="instituicaoForm.$submitted && instituicaoForm.logradouro.$invalid" class="help-block">Logradouro deve ser informado</div></div></div><div class="col-lg-2"><div class="form-group am-required" ng-class="{ \'has-error\': instituicaoForm.$submitted && instituicaoForm.numero.$invalid }"><label class="control-label" for="email">N\xFAmero</label><input name="numero" id="numero" ng-model="vm.instituicao.endereco.numero" type="text" class="form-control" required><div ng-show="instituicaoForm.$submitted && instituicaoForm.numero.$invalid" class="help-block">N\xFAmero deve ser informado</div></div></div><div class="col-lg-3"><div class="form-group am-required" ng-class="{ \'has-error\': instituicaoForm.$submitted && instituicaoForm.bairro.$invalid }"><label class="control-label" for="email">Bairro</label><input name="bairro" id="bairro" ng-model="vm.instituicao.endereco.bairro" type="text" class="form-control" required><div ng-show="instituicaoForm.$submitted && instituicaoForm.bairro.$invalid" class="help-block">Bairro deve ser informado</div></div></div></div><div class="row"><div class="col-lg-5"><div class="form-group" ng-class="{ \'has-error\': instituicaoForm.$submitted && instituicaoForm.complemento.$invalid }"><label class="control-label" for="complemento">Complemento</label><input name="complemento" id="complemento" ng-model="vm.instituicao.endereco.complemento" type="text" class="form-control"></div></div><div class="col-lg-4"><div class="form-group am-required" ng-class="{ \'has-error\': instituicaoForm.$submitted && instituicaoForm.localidade.$invalid }"><label class="control-label" for="localidade">Cidade</label><input name="localidade" id="localidade" ng-model="vm.instituicao.endereco.localidade" type="text" class="form-control" required><div ng-show="instituicaoForm.$submitted && instituicaoForm.localidade.$invalid" class="help-block">Cidade deve ser informado</div></div></div><div class="col-lg-3"><div class="form-group am-required" ng-class="{ \'has-error\': instituicaoForm.$submitted && instituicaoForm.uf.$invalid }"><label class="control-label" for="email">UF</label><input name="uf" id="uf" ng-model="vm.instituicao.endereco.uf" type="text" class="form-control" required><div ng-show="instituicaoForm.$submitted && instituicaoForm.uf.$invalid" class="help-block">UF deve ser informado</div></div></div></div></div><div class="form-group"><input class="btn btn-primary" type="submit" value="{{vm.isEdited() ? \'Alterar\':\'Salvar\' }}"> <button class="btn btn-default" type="button" ng-click="vm.cancelar()">Cancelar</button></div></form></div></div>');
$templateCache.put('app/components/instituicao/instituicoes.html','<div class="row"><div class="col-lg-12"><div class="box box-primary"><div class="row"><div class="col-lg-12"><div class="pull-right"><button type="button" class="btn am-btn-new btn-primary" ng-click="vm.addInstituicao()" tooltip-placement="top" uib-tooltip="Criar nova institui\xE7\xE3o"><i class="fa fa-plus-circle"></i> <span class="hidden-xs hidden-sm">Nova Institui\xE7\xE3o</span></button></div></div><div class="row"><div class="col-lg-12"><table datatable="ng" dt-options="vm.dtOptions" class="table table-striped table-bordered table-hover" id="dtInstituicoes"><thead><tr><th width="8%">A\xE7\xF5es</th><th width="30%">Nome</th><th width="15%">Nome de Usu\xE1rio</th><th width="15%">Telefone</th><th width="10%">Status</th></tr></thead><tbody><tr class="odd gradeX" ng-repeat="instituicao in vm.instituicoes"><td><button type="button" ng-click="vm.openDetails(instituicao)" title="Visualizar Detalhes" data-toggle="tooltip" access-view="ROLE_ADMIN" tooltip-placement="top" uib-tooltip="Visualizar Detalhes" class="btn btn-xs btn-primary"><i class="fa fa-search"></i></button> <button type="button" ng-click="vm.editInstituicao(instituicao)" class="btn btn-xs btn-default" tooltip-placement="top" uib-tooltip="Editar Institui\xE7\xE3o" access-view="ROLE_ADMIN"><i class="fa fa-pencil"></i></button></td><td>{{instituicao.nome}}</td><td>{{instituicao.conta.username}}</td><td>{{instituicao.telefone | brPhoneNumber}}</td><td><span ng-class="{\'label label-danger\': !instituicao.conta.ativo,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\'label label-success\': instituicao.conta.ativo}">{{instituicao.conta.ativo? \'Ativa\': \'Inativa\'}}</span></td></tr></tbody></table></div></div></div></div></div></div>');
$templateCache.put('app/components/mensageiroAssociado/mensageiro-associado.edit.html','<div class="modal-header"><button type="button" ng-click="vm.cancel()" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></button><h4 class="modal-title">Associa\xE7\xE3o de Mensageiro</h4></div><form name="mesageiroAssForm" ng-submit="mesageiroAssForm.$valid && vm.save()" role="form" novalidate><div class="modal-body row" id="modal-body"><div class="input-group col-sm-12" ng-show="!vm.isEdited()"><input type="text" ng-model="vm.mensageiroAss.mensageiro" class="form-control" placeholder="E-mail do mensageiro" uib-typeahead="mensageiro as mensageiro.conta.email for mensageiro in vm.findMensageiro($viewValue)" typeahead-loading="loadingMens" typeahead-no-results="noResults" typeahead-editable="false" typeahead-on-select="vm.onSelect($model)" typeahead-template-url="app/components/partials/mensageiro-card-search.html" uib-tooltip="Entre com o e-mail de um mensageiro" tooltip-placement="top" tooltip-trigger="\'mouseenter\'" tooltip-enable="!vm.mensageiroAss.mensageiro" autofocus> <span class="input-group-addon"><i class="fa fa-search"></i></span></div><div class="am-card-result" ng-show="vm.mensageiroAss.mensageiro != null"><div class="post am-card-result-content"><div class="user-block"><img class="img-responsive img-circle" ng-show="vm.mensageiroAss.mensageiro.foto && vm.image" data-ng-src="data:{{vm.mensageiroAss.mensageiro.foto.contentType}};base64,{{vm.image}}"> <img class="img-responsive img-circle" ng-show="!vm.mensageiroAss.mensageiro.foto" ng-src="{{vm.mockImage}}"> <span class="username">{{vm.mensageiroAss.mensageiro.nome}} <a ng-click="vm.removeCurrentMensageiro()" ng-show="!vm.isEdited()" uib-tooltip="Remover Mensageiro" tooltip-placement="top" class="pull-right btn-box-tool"><i class="fa fa-1x fa-times"></i></a> </span><span class="description">{{vm.mensageiroAss.mensageiro.conta.username}} - {{vm.mensageiroAss.mensageiro.conta.email}}</span> <span class="description">{{vm.mensageiroAss.mensageiro.telefone}}</span></div><table class="table" style="font-size: 13px;" ng-show="vm.mensageiroAss.mensageiro.enderecos.length"><thead><tr><th width="40%">Logradouro</th><th width="10%">Bairro</th><th width="10%">Localide</th><th width="5%">UF</th></tr></thead><tbody><tr ng-repeat="end in vm.mensageiroAss.mensageiro.enderecos"><td>{{end.logradouro}}</td><td>{{end.bairro}}</td><td>{{end.localidade}}</td><td>{{end.uf}}</td></tr></tbody></table><div class="am-card-adrrs-empty"><div class="well am-card-adrrs-empty" ng-show="!vm.mensageiroAss.mensageiro.enderecos.length"><span>Mensageiro n\xE3o possu\xED nenhum endere\xE7o.</span></div></div></div></div><div class="col-sm-4" ng-show="vm.mensageiroAss.mensageiro != null">Status<br><input bs-switch name="ativo" switch-on-text="Ativo" switch-off-text="Inativo" switch-size="small" ng-model="vm.mensageiroAss.status" switch-off-color="danger" type="checkbox" class="form-control"></div></div><div class="modal-footer"><input class="btn btn-primary" type="submit" value="{{vm.isEdited() ? \'Alterar\':\'Salvar\' }}"> <button class="btn btn-default" type="button" ng-click="vm.cancel()">Cancelar</button></div></form><div class="overlay" ng-show="vm.loading"><i class="fa fa-refresh fa-spin"></i></div>');
$templateCache.put('app/components/mensageiroAssociado/mensageiros-associados.html','<div class="row"><div class="col-lg-12"><div class="box box-primary"><div class="row"><div class="col-lg-12"><div class="pull-right"><button type="button" class="btn am-btn-new btn-primary" ng-click="vm.addAssociacao()"><i class="fa fa-plus-circle"></i> <span class="hidden-xs hidden-sm">Novo Mensageiro</span></button></div></div><div class="row"><div class="col-lg-12"><table datatable="ng" dt-options="vm.dtOptions" class="table table-striped table-bordered table-hover" id="dtCategorias"><thead><tr><th width="8%">A\xE7\xF5es</th><th width="20%">Nome</th><th width="20%">E-mail</th><th width="15%">telefone</th><th width="15%">Data Associa\xE7\xE3o</th><th width="15%">status</th></tr></thead><tbody><tr class="odd gradeX" ng-repeat="associado in vm.associados"><td><button type="button" ng-click="vm.editAssociacao(associado)" tooltip-placement="top" uib-tooltip="Editar Mensageiro Associado" class="btn btn-xs btn-default" access-view="ROLE_INSTITUICAO"><i class="fa fa-pencil"></i></button></td><td>{{associado.mensageiro.nome}}</td><td>{{associado.mensageiro.conta.email}}</td><td>{{associado.mensageiro.telefone}}</td><td>{{associado.data | date : "dd/MM/yyyy"}}</td><td><span ng-class="{\'label label-danger\': !associado.status,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\'label label-success\': associado.status}">{{associado.status? \'Ativo\': \'Inativo\'}}</span></td></tr></tbody></table></div></div></div></div></div></div>');
$templateCache.put('app/components/partials/dialog.confirm.html','<div class="modal-header"><h3 class="modal-title" id="modal-title">Confirma\xE7\xE3o</h3></div><div class="modal-body" id="modal-body">Deseja Realmente apagar o registro?</div><div class="modal-footer"><button class="btn btn-primary" ng-click="sim()" type="button">Sim</button> <button class="btn btn-default" ng-click="cancelar()" type="button">N\xE3o</button></div>');
$templateCache.put('app/components/partials/item-card-search.html','<a><div class="am-autocomplete-width"><b><span ng-bind-html="match.model.nome | uibTypeaheadHighlight:query"></span></b><br><small><span ng-bind-html="match.model.descricao | uibTypeaheadHighlight:query"></span></small></div></a>');
$templateCache.put('app/components/partials/mensageiro-card-search.html','<a><div class="am-autocomplete-width"><b><span ng-bind-html="match.model.nome | uibTypeaheadHighlight:query"></span></b><br><small><span ng-bind-html="match.label | uibTypeaheadHighlight:query"></span> <span class="label label-default" ng-bind-html="match.model.conta.username | uibTypeaheadHighlight:query"></span></small></div></a>');
$templateCache.put('app/layouts/notification/header-notification.directive.html','<div class="user pull-right"><div class="item dropdown" uib-dropdown><a href="#" class="dropdown-toggle" uib-dropdown-toggle><i class="fa fa-user fa-lg"></i></a><ul class="dropdown-menu dropdown-menu-right"><li class="dropdown-header"><center>Usu\xE1rio<br><b>{{headerNotificationCtrl.usuario.username}}</b></center></li><div><ul class="list-group"><a class="list-group-item">Conta </a><a class="list-group-item" ng-click="headerNotificationCtrl.logout()">Sair</a></ul></div></ul></div><div class="item dropdown" uib-dropdown><a href="#" class="dropdown-toggle" uib-dropdown-toggle><i class="fa fa-bell fa-lg"></i> <span ng-show="donativosNtlist.length>0" class="label label-warning number-notification">{{donativosNtlist.length}}</span></a><ul class="dropdown-menu dropdown-menu-right scrollable-menu"><li class="dropdown-header"><b>Notifica\xE7\xF5es de doa\xE7\xF5es</b></li><div><ul class="list-group" ng-repeat="donativo in donativosNtlist"><a ng-click="openDetailsDonativo(donativo)" class="list-group-item"><span class="badge {{donativo.estadoAtivo.estadoDoacao | status}}">{{donativo.estadoAtivo.estadoDoacao == \'NAO_ACEITO\' ? \'N\xC3O ACEITO\' : donativo.estadoAtivo.estadoDoacao}}</span> {{donativo.nome}}</a></ul><ul ng-show="donativosNtlist.length === 0 || !donativosNtlist" class="list-group"><a class="list-group-item">Nenhuma notifica\xE7\xE3o</a></ul></div></ul></div></div>');
$templateCache.put('app/components/auth/password/password.html','<div class="container"><div class="row"><div class="col-md-5 col-md-offset-3"><div class="pass-panel panel panel-default"><div class="panel-body"><h1 class="text-center">Primeiro Acesso</h1><div class="am-pass-change-intro text-justify"><span>Ol\xE1, Seja bem vindo ao <b>Ajude Mais</b>. Este \xE9 seu primeiro acesso, para continuar voc\xEA deve alterar a senha padr\xE3o, fornecendo uma nova para seus pr\xF3ximos acessos.</span></div><form class="am-pass-change-form" name="passForm" role="form" ng-submit="passForm.$valid && vm.change()" novalidate><div class="form-group has-feedback" ng-class="{ \'has-error\': passForm.$submitted && passForm.nSenha.$invalid }"><label class="control-label">Nova senha</label><input id="nSenha" ng-maxlength="12" ng-minlength="4" class="form-control" ng-model="vm.nSenha" name="nSenha" type="password" required><div ng-show="passForm.$submitted && passForm.nSenha.$error.required" class="help-block">A senha deve ser informada</div><div ng-show="passForm.$submitted && passForm.nSenha.$error.minlength" class="help-block">A senha deve est\xE1 entre 4 e 12 caracteres</div><div ng-show="passForm.$submitted && passForm.nSenha.$error.maxlength" class="help-block">A senha deve est\xE1 entre 4 e 12 caracteres</div></div><div class="form-group has-feedback" ng-class="{ \'has-error\': passForm.$submitted && passForm.rSenha.$invalid }"><label class="control-label">Confirma\xE7\xE3o de senha</label><input id="rSenha" minlength="4" maxlength="20" class="form-control" ng-model="vm.rSenha" name="rSenha" type="password" required><div ng-show="passForm.$submitted && passForm.rSenha.$error.required" class="help-block">A senha deve ser informada</div><div ng-show="passForm.$submitted && passForm.rSenha.$error.minlength" class="help-block">A senha deve est\xE1 entre 4 e 12 caracteres</div><div ng-show="passForm.$submitted && passForm.rSenha.$error.maxlength" class="help-block">A senha deve est\xE1 entre 4 e 12 caracteres</div><div ng-if="vm.error" class="am-help-block">{{vm.error}}</div></div><div class="am-pass-change-btn"><input id="btnLogin" type="submit" class="btn btn-lg btn-primary btn-block" value="Concluir"></div></form></div></div></div></div></div>');
$templateCache.put('app/components/dashboard/admin/dashboard.admin.html','<div class="row"><div class="col-md-3 col-sm-6 col-xs-12"><div class="info-box"><span class="info-box-icon bg-aqua"><i class="fa fa-university"></i></span><div class="info-box-content"><span class="info-box-text">Institui\xE7\xF5es</span> <span class="info-box-number">{{vm.countInstituicoes}}</span></div></div></div><div class="col-md-3 col-sm-6 col-xs-12"><div class="info-box"><span class="info-box-icon bg-red"><i class="fa fa fa-heart"></i></span><div class="info-box-content"><span class="info-box-text">Doa\xE7\xF5es</span> <span class="info-box-number">{{vm.countDonativos}}</span></div></div></div><div class="clearfix visible-sm-block"></div><div class="col-md-3 col-sm-6 col-xs-12"><div class="info-box"><span class="info-box-icon bg-green"><i class="fa fa-user"></i></span><div class="info-box-content"><span class="info-box-text">Doadores</span> <span class="info-box-number">{{vm.countDoadores}}</span></div></div></div><div class="col-md-3 col-sm-6 col-xs-12"><div class="info-box"><span class="info-box-icon bg-yellow"><i class="fa fa-id-card-o"></i></span><div class="info-box-content"><span class="info-box-text">Mensageiros</span> <span class="info-box-number">{{vm.countMensageiros}}</span></div></div></div></div><div class="row"><div class="col-md-12"><uib-accordion><div uib-accordion-group class="box" is-open="vm.statusPanelLineChart"><uib-accordion-heading>Doa\xE7\xF5es nos \xFAltimos 30 dias <i class="pull-right glyphicon" ng-class="{\'fa fa-chevron-down\': vm.statusPanelLineChart, \'fa fa-chevron-right\': !vm.statusPanelLineChart}"></i></uib-accordion-heading><div class="box-body"><div class="chart"><canvas id="line" class="chart chart-line" chart-data="vm.dataDoacoesPeriod" options="vm.options" chart-legend="true" chart-labels="vm.labelsDoacoesPeriod" chart-series="vm.seriesDoacoesPeriod"></canvas></div></div></div></uib-accordion></div></div><div class="row"><div class="col-md-12"><uib-accordion><div uib-accordion-group class="box" is-open="vm.statusPanelInstDetail"><uib-accordion-heading>Vis\xE3o Geral de Institui\xE7\xE3o <i class="pull-right glyphicon" ng-class="{\'fa fa-chevron-down\': vm.statusPanelInstDetail, \'fa fa-chevron-right\': !vm.statusPanelInstDetail}"></i></uib-accordion-heading><div class="box-body"><select name="instituicao" class="form-control" ng-model="vm.instituicaoSelected" ng-options="inst as inst.nome for inst in vm.instituicoesAtivas" ng-change="vm.onSelectInstituicao()"></select></div><div class="row"><div class="col-md-8"><p class="text-center"><strong>Doa\xE7\xF5es do \xFAltimo m\xEAs</strong></p><div class="chart"><canvas id="lineInst" class="chart chart-line" chart-data="vm.dataDoacoesInstPeriod" options="vm.options" chart-legend="true" chart-labels="vm.labelsDoacoesInstPeriod" chart-series="vm.seriesDoacoesPeriod"></canvas></div></div><div class="col-md-4"><p class="text-center"><strong>Campanhas Abertas</strong></p><div ng-repeat="campanha in vm.campanhasAtivasInt" ng-show="vm.campanhasAtivasInt.length"><div class="box box-primary"><div class="box-header">{{campanha.nome}}</div><div class="box-body"><div ng-repeat="meta in campanha.metas"><div class="progress-group"><span class="">{{meta.categoria.descricao}}</span> <span class="progress-number"><b>{{meta.percentualAtingido}}</b> % de {{meta.quantidade}}</span><div class="progress sm"><div class="progress-bar progress-bar-aqua" style="width: {{meta.percentualAtingido}}%;"></div></div></div></div></div></div></div><div class="well well-sm" ng-show="!vm.campanhasAtivasInt.length">Nenhuma campanha ativa.</div></div></div><div class="box-footer"><div class="row"><div class="col-sm-3 col-xs-6"><div class="description-block border-right"><h5 class="description-header">{{vm.countDonativosInst}}</h5><span class="description-text">DOA\xC7\xD5ES GERAIS</span></div></div><div class="col-sm-3 col-xs-6"><div class="description-block border-right"><h5 class="description-header">{{vm.countDonativosCampanhaInst}}</h5><span class="description-text">DOA\xC7\xD5ES POR CAMPANHAS</span></div></div><div class="col-sm-3 col-xs-6"><div class="description-block border-right"><h5 class="description-header">{{vm.countCampanhasInst}}</h5><span class="description-text">CAMPANHAS</span></div></div><div class="col-sm-3 col-xs-6"><div class="description-block"><h5 class="description-header">{{vm.countMensageirosInst}}</h5><span class="description-text">MENSAGEIROS ASSOCIADOS</span></div></div></div></div></div></uib-accordion></div></div><div class="row"><div class="col-md-12"><uib-accordion><div uib-accordion-group class="box" is-open="vm.statusPanelRanking"><uib-accordion-heading>Top Mensageiros <i class="pull-right glyphicon" ng-class="{\'fa fa-chevron-down\': vm.statusPanelRanking, \'fa fa-chevron-right\': !vm.statusPanelRanking}"></i></uib-accordion-heading><div class="box-body no-padding"><ul class="users-list"><li ng-repeat="mr in vm.rankingMensageiros"><img ng-show="!mr.image" ng-src="{{vm.mockImage}}"> <img data-ng-src="data:{{mr.ranking.mensageiro.mensageiro.foto.contentType}};base64,{{mr.image}}"><p class="users-list-name" href="#"><span class="badge">{{$index + 1}}</span> {{mr.ranking.mensageiro.mensageiro.nome}}</p><span class="users-list-date">{{mr.ranking.mensageiro.instituicaoCaridade.nome}}</span> <span class="users-list-number">{{mr.ranking.quantidadeDoacoes}} Coletas Realizadas</span></li></ul></div></div></uib-accordion></div></div>');
$templateCache.put('app/components/dashboard/instituicao/dashboard.instituicao.html','<div class="row"><div class="col-md-3 col-sm-6 col-xs-12"><div class="info-box"><span class="info-box-icon bg-red"><i class="fa fa fa-heart"></i></span><div class="info-box-content"><span class="info-box-text">Doa\xE7\xF5es</span> <span class="info-box-number">{{vm.countDonativos}}</span></div></div></div><div class="clearfix visible-sm-block"></div><div class="col-md-3 col-sm-6 col-xs-12"><div class="info-box"><span class="info-box-icon bg-green"><i class="fa fa-hashtag"></i></span><div class="info-box-content"><span class="info-box-text">Campanhas</span> <span class="info-box-number">{{vm.countCampanhas}}</span></div></div></div><div class="col-md-3 col-sm-6 col-xs-12"><div class="info-box"><span class="info-box-icon bg-yellow"><i class="fa fa-id-card-o"></i></span><div class="info-box-content"><span class="info-box-text">Mensageiros</span> <span class="info-box-number">{{vm.countMensageiros}}</span></div></div></div><div class="col-md-3 col-sm-6 col-xs-12"><div class="info-box"><span class="info-box-icon bg-aqua"><i class="fa fa-tags"></i></span><div class="info-box-content"><span class="info-box-text">Itens do\xE1veis</span> <span class="info-box-number">{{vm.countItens}}</span></div></div></div></div><div class="row"><div class="col-md-12"><uib-accordion><div uib-accordion-group class="box" is-open="vm.statusPanelLineChart"><uib-accordion-heading>Doa\xE7\xF5es nos \xFAltimos 30 dias <i class="pull-right glyphicon" ng-class="{\'fa fa-chevron-down\': vm.statusPanelLineChart, \'fa fa-chevron-right\': !vm.statusPanelLineChart}"></i></uib-accordion-heading><div class="box-body"><div class="chart"><canvas id="lineInst" class="chart chart-line" chart-data="vm.dataDoacoesInstPeriod" options="vm.options" chart-legend="true" chart-labels="vm.labelsDoacoesInstPeriod" chart-series="vm.seriesDoacoesPeriod"></canvas></div></div></div></uib-accordion></div></div><div class="row"><div class="col-md-12"><uib-accordion><div uib-accordion-group class="box" is-open="vm.statusPanelCampanhas"><uib-accordion-heading>Campanhas <i class="pull-right glyphicon" ng-class="{\'fa fa-chevron-down\': vm.statusPanelCampanhas, \'fa fa-chevron-right\': !vm.statusPanelCampanhas}"></i></uib-accordion-heading><div class="box-body no-padding"><div class="table-responsive"><table class="table no-margin"><thead><tr><th>Campanha</th><th>T\xE9rmino</th><th>Percentual da campanha</th></tr></thead><tbody><tr ng-repeat="campanhaMeta in vm.campanhasMetasProgres"><td>{{campanhaMeta.campanha.descricao}}</td><td><span class="label label-success">{{campanhaMeta.campanha.dataFim | date : "dd/MM/yyyy"}}</span></td><td><div class="progress-group"><span class="progress-number"><b>{{campanhaMeta.percentualAtingido}} </b>%</span><div class="progress sm"><div class="progress-bar progress-bar-aqua" style="width: {{campanhaMeta.percentualAtingido}}%;"></div></div></div></td></tr></tbody></table></div></div></div></uib-accordion></div></div><div class="row"><div class="col-md-6"><uib-accordion><div uib-accordion-group class="box" is-open="vm.statusPanelRanking"><uib-accordion-heading>Top Mensageiros <i class="pull-right glyphicon" ng-class="{\'fa fa-chevron-down\': vm.statusPanelRanking, \'fa fa-chevron-right\': !vm.statusPanelRanking}"></i></uib-accordion-heading><div class="box-body no-padding"><ul class="users-list"><li ng-repeat="mr in vm.rankingMensageiros"><img ng-show="!mr.image" class="img-circle" ng-src="{{vm.mockImage}}"> <img class="img-circle" data-ng-src="data:{{mr.ranking.mensageiro.mensageiro.foto.contentType}};base64,{{mr.image}}"><p class="users-list-name" href="#"><span class="badge">{{$index + 1}}</span> {{mr.ranking.mensageiro.mensageiro.nome}}</p><span class="users-list-date">{{mr.ranking.mensageiro.instituicaoCaridade.nome}}</span> <span class="users-list-number">{{mr.ranking.quantidadeDoacoes}} Coletas Realizadas</span></li></ul></div></div></uib-accordion></div><div class="col-md-6"><uib-accordion><div uib-accordion-group class="box" is-open="vm.statusPanelTimeline"><uib-accordion-heading>\xDAltimas Doa\xE7\xF5es <i class="pull-right glyphicon" ng-class="{\'fa fa-chevron-down\': vm.statusPanelTimeline, \'fa fa-chevron-right\': !vm.statusPanelTimeline}"></i></uib-accordion-heading><div class="box-body no-padding"><ul class="timeline"><li><i class="fa fa-circle bg-gray"></i><br></li><li ng-repeat="donativo in vm.donativosTimeline"><span class="{{vm.getEtadosDonativo(donativo.estadosDaDoacao) | status}}">{{vm.getEtadosDonativo(donativo.estadosDaDoacao) == \'NAO_ACEITO\' ? \'N\xC3O ACEITO\' : vm.getEtadosDonativo(donativo.estadosDaDoacao) == \'CANCELADO_POR_MENSAGEIRO\' ? \'CANCELADO\' : vm.getEtadosDonativo(donativo.estadosDaDoacao)}}</span><div class="timeline-item"><span class="time"><i class="fa fa-tag"></i> {{donativo.categoria.nome}}</span><h3 class="timeline-header"><a ng-click="vm.openDetails(donativo)">{{donativo.nome}}</a></h3><div ng-show="donativo.descricao" class="timeline-body"><div class="row">{{donativo.descricao}}</div><br><div ng-show="donativo.mensageiro" class="user-block"><img class="img-responsive img-circle" ng-src="{{vm.mockImage}}"> <span class="username">Coleta: {{donativo.mensageiro.nome}} </span><span class="description">{{donativo.mensageiro.telefone}} - {{donativo.mensageiro.conta.email}}</span> <span class="description">{{mensageiroAss.mensageiro.telefone}}</span></div></div></div></li></ul></div></div></uib-accordion></div></div>');
$templateCache.put('app/components/erros/403/403.html','<div class="am-layout-simple-page__container"><div class="am-error-panel"><h1 class="am-error-panel__code"><i class="fa fa-lock"></i></h1><h2 class="am-error-panel__title">{{pageTitle}}</h2><div class="am-error-panel__description">Desculpe, voc\xEA n\xE3o est\xE1 autorizado a acessar a p\xE1gina que solicitou. Se voc\xEA acha que isso \xE9 um engano, entre em contato com a gente.<br><br><a ui-sref="home" class="btn btn-primary">Voltar para onde estava</a></div></div></div>');
$templateCache.put('app/components/erros/500/500.html','<div class="am-layout-simple-page__container"><div class="am-error-panel"><h1 class="am-error-panel__code"><i class="fa fa-exclamation-triangle"></i> 500</h1><h2 class="am-error-panel__title">{{pageTitle}}</h2><div class="am-error-panel__description">Desculpe, algo muito estranho aconteceu e n\xE3o conseguimos processar a sua requisi\xE7\xE3o. Tente de novo ou entre em contato com a gente se precisar de ajuda.<br><br><a ui-sref="home" class="btn btn-primary">Voltar para a p\xE1gina inicial</a></div></div></div>');
$templateCache.put('app/components/erros/refused/refused.html','<div class="am-layout-simple-page__container"><div class="am-error-panel"><h1 class="am-error-panel__code"><i class="fa fa-plug"></i></h1><h2 class="am-error-panel__title">{{pageTitle}}</h2><div class="am-error-panel__description">Verifique sua conex\xE3o com a internet. Caso n\xE3o seja esse o problema, entre em contanto.<br><br><a ui-sref="home" class="btn btn-primary">Voltar para a p\xE1gina inicial</a></div></div></div>');
$templateCache.put('app/layouts/sidebar/directive/sidebar.directive.html','<div id="sidebar-wrapper"><ul class="sidebar"><li class="sidebar-main"><a ng-click="toggle()"><img alt="AjudeMais" src="content/img/am-icon-name (3).png"> <span class="menu-icon fa fa-bars"></span></a></li><li class="sidebar-list" access-view="ROLE_ADMIN" ui-sref-active="active"><a id="op_dashboard_admin" ui-sref="home.dashboard.admin"><i class="menu-icon fa fa-home fa-tachometer"></i> Dashboard</a></li><li class="sidebar-list" access-view="ROLE_INSTITUICAO" ui-sref-active="active"><a id="op_dashboard_instituicao" ui-sref="home.dashboard.instituicao"><i class="menu-icon fa fa-home fa-tachometer"></i> Dashboard</a></li><li class="sidebar-list" access-view="ROLE_ADMIN"><a id="op_instituicoes" ui-sref="home.instituicao.list"><i class="menu-icon fa fa-university fa-fw"></i>Institui\xE7\xF5es</a></li><li class="sidebar-list" access-view="ROLE_INSTITUICAO"><a id="op_campanhas" ui-sref="home.campanha.list"><i class="menu-icon fa fa-hashtag"></i>Campanhas</a></li><li class="sidebar-list" access-view="ROLE_INSTITUICAO"><a id="op_donativos" ui-sref="home.donativo.list"><i class="menu-icon fa fa-heart"></i>Doa\xE7\xF5es</a></li><li class="sidebar-list" access-view="ROLE_INSTITUICAO"><a id="op_itens_doaveis" ui-sref="home.categoria"><i class="menu-icon fa fa-tags"></i>Itens Do\xE1veis</a></li><li class="sidebar-list" access-view="ROLE_INSTITUICAO"><a id="op_mensageiros" ui-sref="home.mensageirosAss"><i class="menu-icon fa fa-id-card-o"></i>Mensageiros</a></li></ul><div class="sidebar-footer"><div class="col-xs-6"><a href="#"><i class="fa fa-info-circle"></i> Sobre</a></div><div class="col-xs-6"><a href="#"><i class="fa fa-question-circle"></i> Ajuda</a></div></div></div>');}]);})();})(window.angular);